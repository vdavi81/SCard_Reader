
SCard_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004778  08004778  00005778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004854  08004854  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004854  08004854  00005854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800485c  0800485c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004864  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000196c  20000010  08004874  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08004874  0000697c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c301  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002566  00000000  00000000  00012339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  000148a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c5  00000000  00000000  00015448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000110fd  00000000  00000000  00015d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc93  00000000  00000000  00026e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006da3e  00000000  00000000  00033a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a14db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002888  00000000  00000000  000a1520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a3da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004760 	.word	0x08004760

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004760 	.word	0x08004760

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <iomod_ScanINs>:
 */
#include "InOut_Mod.h"
#include "main.h"

void iomod_ScanINs(iomod_Input_t *INS)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	INS->IN1 = (uint8_t)HAL_GPIO_ReadPin(IN1_GPIO_Port, IN1_Pin);
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	00da      	lsls	r2, r3, #3
 80004b4:	23a0      	movs	r3, #160	@ 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	0011      	movs	r1, r2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fdc2 	bl	8001044 <HAL_GPIO_ReadPin>
 80004c0:	0003      	movs	r3, r0
 80004c2:	001a      	movs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	701a      	strb	r2, [r3, #0]
	INS->IN2 = (uint8_t)HAL_GPIO_ReadPin(IN2_GPIO_Port, IN2_Pin);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <iomod_ScanINs+0x3c>)
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fdb9 	bl	8001044 <HAL_GPIO_ReadPin>
 80004d2:	0003      	movs	r3, r0
 80004d4:	001a      	movs	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	705a      	strb	r2, [r3, #1]

}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	50000800 	.word	0x50000800

080004e8 <iomod_Compare_Input_ste>:

iomod_Compare_state iomod_Compare_Input_ste(iomod_Input_t INs1,iomod_Input_t INs2)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	8018      	strh	r0, [r3, #0]
 80004f2:	003b      	movs	r3, r7
 80004f4:	8019      	strh	r1, [r3, #0]
	iomod_Compare_state ret = EQUALS;
 80004f6:	210f      	movs	r1, #15
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]

	if(INs1.IN1 != INs2.IN1)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	003b      	movs	r3, r7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	d002      	beq.n	8000510 <iomod_Compare_Input_ste+0x28>
	{
		ret = NOT_EQUALS;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
	}

	if(INs1.IN2 != INs2.IN2)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	785a      	ldrb	r2, [r3, #1]
 8000514:	003b      	movs	r3, r7
 8000516:	785b      	ldrb	r3, [r3, #1]
 8000518:	429a      	cmp	r2, r3
 800051a:	d003      	beq.n	8000524 <iomod_Compare_Input_ste+0x3c>
	{
		ret = NOT_EQUALS;
 800051c:	230f      	movs	r3, #15
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8000524:	230f      	movs	r3, #15
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	781b      	ldrb	r3, [r3, #0]

}
 800052a:	0018      	movs	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <iomod_UpdateOutput>:

void iomod_UpdateOutput(iomod_Input_t INs)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	8018      	strh	r0, [r3, #0]
	if(INs.IN1 == 0 && INs.IN2 == 0)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d11e      	bne.n	8000584 <iomod_UpdateOutput+0x50>
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d11a      	bne.n	8000584 <iomod_UpdateOutput+0x50>
	{
     // HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, GPIO_PIN_SET);
 800054e:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 8000550:	2201      	movs	r2, #1
 8000552:	2104      	movs	r1, #4
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fd92 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin, GPIO_PIN_RESET);
 800055a:	4b41      	ldr	r3, [pc, #260]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 800055c:	2200      	movs	r2, #0
 800055e:	2108      	movs	r1, #8
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fd8c 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin, GPIO_PIN_RESET);
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fd86 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin, GPIO_PIN_RESET);
 8000572:	2380      	movs	r3, #128	@ 0x80
 8000574:	0099      	lsls	r1, r3, #2
 8000576:	23a0      	movs	r3, #160	@ 0xa0
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	2200      	movs	r2, #0
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fd7e 	bl	800107e <HAL_GPIO_WritePin>
 8000582:	e068      	b.n	8000656 <iomod_UpdateOutput+0x122>
	}
	else if(INs.IN1 == 0 && INs.IN2 == 1)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d11e      	bne.n	80005ca <iomod_UpdateOutput+0x96>
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d11a      	bne.n	80005ca <iomod_UpdateOutput+0x96>
	{
     // HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, GPIO_PIN_RESET);
 8000594:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 8000596:	2200      	movs	r2, #0
 8000598:	2104      	movs	r1, #4
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fd6f 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin, GPIO_PIN_SET);
 80005a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fd69 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin, GPIO_PIN_RESET);
 80005ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fd63 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin, GPIO_PIN_RESET);
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	0099      	lsls	r1, r3, #2
 80005bc:	23a0      	movs	r3, #160	@ 0xa0
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	2200      	movs	r2, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fd5b 	bl	800107e <HAL_GPIO_WritePin>
 80005c8:	e045      	b.n	8000656 <iomod_UpdateOutput+0x122>
	}
	else if(INs.IN1 == 1 && INs.IN2 == 0)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d11e      	bne.n	8000610 <iomod_UpdateOutput+0xdc>
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	785b      	ldrb	r3, [r3, #1]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d11a      	bne.n	8000610 <iomod_UpdateOutput+0xdc>
	{
     // HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, GPIO_PIN_RESET);
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	2104      	movs	r1, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 fd4c 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin, GPIO_PIN_RESET);
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fd46 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin, GPIO_PIN_SET);
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	2110      	movs	r1, #16
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fd40 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin, GPIO_PIN_RESET);
 80005fe:	2380      	movs	r3, #128	@ 0x80
 8000600:	0099      	lsls	r1, r3, #2
 8000602:	23a0      	movs	r3, #160	@ 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fd38 	bl	800107e <HAL_GPIO_WritePin>
 800060e:	e022      	b.n	8000656 <iomod_UpdateOutput+0x122>
	}
	else if(INs.IN1 == 1 && INs.IN2 == 1)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d11e      	bne.n	8000656 <iomod_UpdateOutput+0x122>
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	785b      	ldrb	r3, [r3, #1]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d11a      	bne.n	8000656 <iomod_UpdateOutput+0x122>
	{
     // HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, GPIO_PIN_RESET);
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fd29 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin, GPIO_PIN_RESET);
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fd23 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin, GPIO_PIN_RESET);
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <iomod_UpdateOutput+0x12c>)
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fd1d 	bl	800107e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin, GPIO_PIN_SET);
 8000644:	2380      	movs	r3, #128	@ 0x80
 8000646:	0099      	lsls	r1, r3, #2
 8000648:	23a0      	movs	r3, #160	@ 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	2201      	movs	r2, #1
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fd15 	bl	800107e <HAL_GPIO_WritePin>
	}

}
 8000654:	e7ff      	b.n	8000656 <iomod_UpdateOutput+0x122>
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	50000800 	.word	0x50000800

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa4a 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f834 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f8a4 	bl	80007bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000674:	f001 fbbc 	bl	8001df0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueINs */
  myQueueINsHandle = osMessageQueueNew (5, sizeof(uint16_t), &myQueueINs_attributes);
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <main+0x54>)
 800067a:	001a      	movs	r2, r3
 800067c:	2102      	movs	r1, #2
 800067e:	2005      	movs	r0, #5
 8000680:	f001 fcde 	bl	8002040 <osMessageQueueNew>
 8000684:	0002      	movs	r2, r0
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <main+0x58>)
 8000688:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InOut */
  InOutHandle = osThreadNew(InOutFunc, NULL, &InOut_attributes);
 800068a:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <main+0x5c>)
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <main+0x60>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fc09 	bl	8001ea8 <osThreadNew>
 8000696:	0002      	movs	r2, r0
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <main+0x64>)
 800069a:	601a      	str	r2, [r3, #0]

  /* creation of DataPerm */
  DataPermHandle = osThreadNew(DataPermFunc, NULL, &DataPerm_attributes);
 800069c:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <main+0x68>)
 800069e:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <main+0x6c>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 fc00 	bl	8001ea8 <osThreadNew>
 80006a8:	0002      	movs	r2, r0
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <main+0x70>)
 80006ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f001 fbcb 	bl	8001e48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	e7fd      	b.n	80006b2 <main+0x4e>
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	080047f8 	.word	0x080047f8
 80006bc:	20000034 	.word	0x20000034
 80006c0:	080047b0 	.word	0x080047b0
 80006c4:	08000921 	.word	0x08000921
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	080047d4 	.word	0x080047d4
 80006d0:	080009c5 	.word	0x080009c5
 80006d4:	20000030 	.word	0x20000030

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b099      	sub	sp, #100	@ 0x64
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	242c      	movs	r4, #44	@ 0x2c
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	0018      	movs	r0, r3
 80006e4:	2334      	movs	r3, #52	@ 0x34
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f004 f803 	bl	80046f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ee:	2318      	movs	r3, #24
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	2314      	movs	r3, #20
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f003 fffb 	bl	80046f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fe:	003b      	movs	r3, r7
 8000700:	0018      	movs	r0, r3
 8000702:	2318      	movs	r3, #24
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f003 fff4 	bl	80046f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <SystemClock_Config+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a29      	ldr	r2, [pc, #164]	@ (80007b8 <SystemClock_Config+0xe0>)
 8000712:	401a      	ands	r2, r3
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <SystemClock_Config+0xdc>)
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	0109      	lsls	r1, r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2202      	movs	r2, #2
 8000724:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2210      	movs	r2, #16
 8000730:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2202      	movs	r2, #2
 8000736:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	02d2      	lsls	r2, r2, #11
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	03d2      	lsls	r2, r2, #15
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	187b      	adds	r3, r7, r1
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fcb1 	bl	80010b8 <HAL_RCC_OscConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800075a:	f000 f951 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	2118      	movs	r1, #24
 8000760:	187b      	adds	r3, r7, r1
 8000762:	220f      	movs	r2, #15
 8000764:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2203      	movs	r2, #3
 800076a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	22b0      	movs	r2, #176	@ 0xb0
 8000770:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2100      	movs	r1, #0
 8000782:	0018      	movs	r0, r3
 8000784:	f001 f814 	bl	80017b0 <HAL_RCC_ClockConfig>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800078c:	f000 f938 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000790:	003b      	movs	r3, r7
 8000792:	2202      	movs	r2, #2
 8000794:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079c:	003b      	movs	r3, r7
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f9f4 	bl	8001b8c <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a8:	f000 f92a 	bl	8000a00 <Error_Handler>
  }
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b019      	add	sp, #100	@ 0x64
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40007000 	.word	0x40007000
 80007b8:	ffffe7ff 	.word	0xffffe7ff

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b089      	sub	sp, #36	@ 0x24
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	240c      	movs	r4, #12
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2314      	movs	r3, #20
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f003 ff91 	bl	80046f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b51      	ldr	r3, [pc, #324]	@ (8000918 <MX_GPIO_Init+0x15c>)
 80007d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007d6:	4b50      	ldr	r3, [pc, #320]	@ (8000918 <MX_GPIO_Init+0x15c>)
 80007d8:	2104      	movs	r1, #4
 80007da:	430a      	orrs	r2, r1
 80007dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007de:	4b4e      	ldr	r3, [pc, #312]	@ (8000918 <MX_GPIO_Init+0x15c>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	2204      	movs	r2, #4
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000918 <MX_GPIO_Init+0x15c>)
 80007ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000918 <MX_GPIO_Init+0x15c>)
 80007f0:	2180      	movs	r1, #128	@ 0x80
 80007f2:	430a      	orrs	r2, r1
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007f6:	4b48      	ldr	r3, [pc, #288]	@ (8000918 <MX_GPIO_Init+0x15c>)
 80007f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fa:	2280      	movs	r2, #128	@ 0x80
 80007fc:	4013      	ands	r3, r2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b45      	ldr	r3, [pc, #276]	@ (8000918 <MX_GPIO_Init+0x15c>)
 8000804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000806:	4b44      	ldr	r3, [pc, #272]	@ (8000918 <MX_GPIO_Init+0x15c>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800080e:	4b42      	ldr	r3, [pc, #264]	@ (8000918 <MX_GPIO_Init+0x15c>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800081a:	4b40      	ldr	r3, [pc, #256]	@ (800091c <MX_GPIO_Init+0x160>)
 800081c:	2200      	movs	r2, #0
 800081e:	211c      	movs	r1, #28
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fc2c 	bl	800107e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000826:	2388      	movs	r3, #136	@ 0x88
 8000828:	0099      	lsls	r1, r3, #2
 800082a:	23a0      	movs	r3, #160	@ 0xa0
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2200      	movs	r2, #0
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fc24 	bl	800107e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	0192      	lsls	r2, r2, #6
 800083c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2284      	movs	r2, #132	@ 0x84
 8000842:	0392      	lsls	r2, r2, #14
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	193b      	adds	r3, r7, r4
 800084e:	4a33      	ldr	r2, [pc, #204]	@ (800091c <MX_GPIO_Init+0x160>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 fa78 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	221c      	movs	r2, #28
 800085c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2201      	movs	r2, #1
 8000868:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000870:	193b      	adds	r3, r7, r4
 8000872:	4a2a      	ldr	r2, [pc, #168]	@ (800091c <MX_GPIO_Init+0x160>)
 8000874:	0019      	movs	r1, r3
 8000876:	0010      	movs	r0, r2
 8000878:	f000 fa66 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2220      	movs	r2, #32
 8000880:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2201      	movs	r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000894:	193a      	adds	r2, r7, r4
 8000896:	23a0      	movs	r3, #160	@ 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fa53 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_Pin */
  GPIO_InitStruct.Pin = IN2_Pin;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2201      	movs	r2, #1
 80008b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	4a19      	ldr	r2, [pc, #100]	@ (800091c <MX_GPIO_Init+0x160>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f000 fa44 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	000c      	movs	r4, r1
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2201      	movs	r2, #1
 80008d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80008de:	193a      	adds	r2, r7, r4
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fa2e 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2280      	movs	r2, #128	@ 0x80
 80008f2:	00d2      	lsls	r2, r2, #3
 80008f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2201      	movs	r2, #1
 8000900:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8000902:	187a      	adds	r2, r7, r1
 8000904:	23a0      	movs	r3, #160	@ 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fa1c 	bl	8000d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b009      	add	sp, #36	@ 0x24
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	50000800 	.word	0x50000800

08000920 <InOutFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_InOutFunc */
void InOutFunc(void *argument)
{
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  iomod_Input_t INs;
  iomod_Input_t INs_prev = {0,0}; /* It is mandatory to Initialize this variable*/
 8000928:	210c      	movs	r1, #12
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	705a      	strb	r2, [r3, #1]
  iomod_Compare_state INs_compare;
  uint16_t msg;

  /* Block for xDelay ms. */
  TickType_t xDelay = IN_OUT_MSEC / portTICK_PERIOD_MS;
 8000936:	23fa      	movs	r3, #250	@ 0xfa
 8000938:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	iomod_ScanINs(&INs);
 800093a:	2510      	movs	r5, #16
 800093c:	197b      	adds	r3, r7, r5
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff fdb2 	bl	80004a8 <iomod_ScanINs>
	INs_compare = iomod_Compare_Input_ste(INs,INs_prev);
 8000944:	2313      	movs	r3, #19
 8000946:	18fc      	adds	r4, r7, r3
 8000948:	260c      	movs	r6, #12
 800094a:	19ba      	adds	r2, r7, r6
 800094c:	197b      	adds	r3, r7, r5
 800094e:	6811      	ldr	r1, [r2, #0]
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	f7ff fdc9 	bl	80004e8 <iomod_Compare_Input_ste>
 8000956:	0003      	movs	r3, r0
 8000958:	7023      	strb	r3, [r4, #0]
	if(INs_compare != EQUALS)
 800095a:	2313      	movs	r3, #19
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d026      	beq.n	80009b2 <InOutFunc+0x92>
	{
		iomod_UpdateOutput(INs);
 8000964:	197b      	adds	r3, r7, r5
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	f7ff fde4 	bl	8000534 <iomod_UpdateOutput>
		INs_prev.IN1 = INs.IN1;
 800096c:	197b      	adds	r3, r7, r5
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	19bb      	adds	r3, r7, r6
 8000972:	701a      	strb	r2, [r3, #0]
		INs_prev.IN2 = INs.IN2;
 8000974:	197b      	adds	r3, r7, r5
 8000976:	785a      	ldrb	r2, [r3, #1]
 8000978:	19bb      	adds	r3, r7, r6
 800097a:	705a      	strb	r2, [r3, #1]
		msg = INs_prev.IN1 + INs_prev.IN2*2;
 800097c:	19bb      	adds	r3, r7, r6
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	19bb      	adds	r3, r7, r6
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	18db      	adds	r3, r3, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	18d3      	adds	r3, r2, r3
 800098c:	b29a      	uxth	r2, r3
 800098e:	210a      	movs	r1, #10
 8000990:	187b      	adds	r3, r7, r1
 8000992:	801a      	strh	r2, [r3, #0]
		msg += (0xAA << 8);
 8000994:	187b      	adds	r3, r7, r1
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <InOutFunc+0x9c>)
 800099a:	4694      	mov	ip, r2
 800099c:	4463      	add	r3, ip
 800099e:	b29a      	uxth	r2, r3
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	801a      	strh	r2, [r3, #0]
		// Write on the queue yhe values of INs
		osMessageQueuePut( myQueueINsHandle, &msg, 0U, 0U);
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <InOutFunc+0xa0>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	1879      	adds	r1, r7, r1
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	f001 fbcd 	bl	800214c <osMessageQueuePut>
	}

    osDelay(xDelay);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fb1b 	bl	8001ff0 <osDelay>
	iomod_ScanINs(&INs);
 80009ba:	e7be      	b.n	800093a <InOutFunc+0x1a>
 80009bc:	ffffaa00 	.word	0xffffaa00
 80009c0:	20000034 	.word	0x20000034

080009c4 <DataPermFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataPermFunc */
void DataPermFunc(void *argument)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  //TickType_t xDelay = DATA_PERM_MSEC / portTICK_PERIOD_MS;
  /* Infinite loop */
  for(;;)
  {
    //osDelay(xDelay);
	status = osMessageQueueGet(myQueueINsHandle, &msg, NULL, osWaitForever);
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <DataPermFunc+0x38>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	2301      	movs	r3, #1
 80009d2:	425b      	negs	r3, r3
 80009d4:	2408      	movs	r4, #8
 80009d6:	1939      	adds	r1, r7, r4
 80009d8:	2200      	movs	r2, #0
 80009da:	f001 fc21 	bl	8002220 <osMessageQueueGet>
 80009de:	0003      	movs	r3, r0
 80009e0:	60fb      	str	r3, [r7, #12]

    if(status == osOK)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f1      	bne.n	80009cc <DataPermFunc+0x8>
    {
    	msg_type = msg << 8;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	881a      	ldrh	r2, [r3, #0]
 80009ec:	210a      	movs	r1, #10
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	0212      	lsls	r2, r2, #8
 80009f2:	801a      	strh	r2, [r3, #0]
    	if(msg_type = 0xAA)
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	22aa      	movs	r2, #170	@ 0xaa
 80009f8:	801a      	strh	r2, [r3, #0]
	status = osMessageQueueGet(myQueueINsHandle, &msg, NULL, osWaitForever);
 80009fa:	e7e7      	b.n	80009cc <DataPermFunc+0x8>
 80009fc:	20000034 	.word	0x20000034

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <HAL_MspInit+0x34>)
 8000a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_MspInit+0x34>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HAL_MspInit+0x34>)
 8000a1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <HAL_MspInit+0x34>)
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	0549      	lsls	r1, r1, #21
 8000a26:	430a      	orrs	r2, r1
 8000a28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2103      	movs	r1, #3
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 f966 	bl	8000d04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	40021000 	.word	0x40021000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8a6 	bl	8000ba8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a5c:	f002 ff82 	bl	8003964 <xTaskGetSchedulerState>
 8000a60:	0003      	movs	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d001      	beq.n	8000a6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a66:	f003 fc5f 	bl	8004328 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a7c:	4813      	ldr	r0, [pc, #76]	@ (8000acc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f7ff fff6 	bl	8000a70 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000a84:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000a86:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a88:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <LoopForever+0xa>)
    CMP R1, R2
 8000a8c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a8e:	d105      	bne.n	8000a9c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000a90:	4811      	ldr	r0, [pc, #68]	@ (8000ad8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a92:	4912      	ldr	r1, [pc, #72]	@ (8000adc <LoopForever+0x12>)
    STR R1, [R0]
 8000a94:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a96:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a98:	4912      	ldr	r1, [pc, #72]	@ (8000ae4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a9a:	6001      	str	r1, [r0, #0]

08000a9c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	4812      	ldr	r0, [pc, #72]	@ (8000ae8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a9e:	4913      	ldr	r1, [pc, #76]	@ (8000aec <LoopForever+0x22>)
  ldr r2, =_sidata
 8000aa0:	4a13      	ldr	r2, [pc, #76]	@ (8000af0 <LoopForever+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ab4:	4c10      	ldr	r4, [pc, #64]	@ (8000af8 <LoopForever+0x2e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 fe1f 	bl	8004704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fdcd 	bl	8000664 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
   ldr   r0, =_estack
 8000acc:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000ad0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ad4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000ad8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000adc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ae0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ae4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000af0:	08004864 	.word	0x08004864
  ldr r2, =_sbss
 8000af4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af8:	2000197c 	.word	0x2000197c

08000afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_IRQHandler>
	...

08000b00 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <HAL_Init+0x3c>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_Init+0x3c>)
 8000b12:	2140      	movs	r1, #64	@ 0x40
 8000b14:	430a      	orrs	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f811 	bl	8000b40 <HAL_InitTick>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e001      	b.n	8000b2e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b2a:	f7ff ff6f 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_InitTick+0x5c>)
 8000b4a:	681c      	ldr	r4, [r3, #0]
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_InitTick+0x60>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	0019      	movs	r1, r3
 8000b52:	23fa      	movs	r3, #250	@ 0xfa
 8000b54:	0098      	lsls	r0, r3, #2
 8000b56:	f7ff fad7 	bl	8000108 <__udivsi3>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0020      	movs	r0, r4
 8000b60:	f7ff fad2 	bl	8000108 <__udivsi3>
 8000b64:	0003      	movs	r3, r0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f8e1 	bl	8000d2e <HAL_SYSTICK_Config>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e00f      	b.n	8000b94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d80b      	bhi.n	8000b92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	425b      	negs	r3, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f8be 	bl	8000d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_InitTick+0x64>)
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b003      	add	sp, #12
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	18d2      	adds	r2, r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000038 	.word	0x20000038

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	@ (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	20000038 	.word	0x20000038

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	0002      	movs	r2, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf4:	d828      	bhi.n	8000c48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	33c0      	adds	r3, #192	@ 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	589b      	ldr	r3, [r3, r2]
 8000c06:	1dfa      	adds	r2, r7, #7
 8000c08:	7812      	ldrb	r2, [r2, #0]
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	400a      	ands	r2, r1
 8000c10:	00d2      	lsls	r2, r2, #3
 8000c12:	21ff      	movs	r1, #255	@ 0xff
 8000c14:	4091      	lsls	r1, r2
 8000c16:	000a      	movs	r2, r1
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	22ff      	movs	r2, #255	@ 0xff
 8000c24:	401a      	ands	r2, r3
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	4003      	ands	r3, r0
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c34:	481f      	ldr	r0, [pc, #124]	@ (8000cb4 <__NVIC_SetPriority+0xd4>)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b25b      	sxtb	r3, r3
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	33c0      	adds	r3, #192	@ 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c46:	e031      	b.n	8000cac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0019      	movs	r1, r3
 8000c50:	230f      	movs	r3, #15
 8000c52:	400b      	ands	r3, r1
 8000c54:	3b08      	subs	r3, #8
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3306      	adds	r3, #6
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	@ 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	@ 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	001c      	movs	r4, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	3306      	adds	r3, #6
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	18c3      	adds	r3, r0, r3
 8000ca8:	3304      	adds	r3, #4
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b003      	add	sp, #12
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d301      	bcc.n	8000cd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e010      	b.n	8000cf6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <SysTick_Config+0x44>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3a01      	subs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ff7c 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x44>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x44>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	210f      	movs	r1, #15
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ffbf 	bl	8000cbc <SysTick_Config>
 8000d3e:	0003      	movs	r3, r0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d5e:	e155      	b.n	800100c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x30>
 8000d76:	e146      	b.n	8001006 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d005      	beq.n	8000d90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d130      	bne.n	8000df2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	43da      	mvns	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	409a      	lsls	r2, r3
 8000db2:	0013      	movs	r3, r2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	2201      	movs	r2, #1
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d017      	beq.n	8000e2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d123      	bne.n	8000e82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	58d3      	ldr	r3, [r2, r3]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2107      	movs	r1, #7
 8000e66:	400b      	ands	r3, r1
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	6939      	ldr	r1, [r7, #16]
 8000e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	23c0      	movs	r3, #192	@ 0xc0
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x17c>
 8000ec2:	e0a0      	b.n	8001006 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4b57      	ldr	r3, [pc, #348]	@ (8001024 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ec8:	4b56      	ldr	r3, [pc, #344]	@ (8001024 <HAL_GPIO_Init+0x2dc>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed0:	4a55      	ldr	r2, [pc, #340]	@ (8001028 <HAL_GPIO_Init+0x2e0>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589b      	ldr	r3, [r3, r2]
 8000edc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	23a0      	movs	r3, #160	@ 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d01f      	beq.n	8000f3e <HAL_GPIO_Init+0x1f6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4a      	ldr	r2, [pc, #296]	@ (800102c <HAL_GPIO_Init+0x2e4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <HAL_GPIO_Init+0x1f2>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a49      	ldr	r2, [pc, #292]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0x1ee>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a48      	ldr	r2, [pc, #288]	@ (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a47      	ldr	r2, [pc, #284]	@ (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x1e6>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a46      	ldr	r2, [pc, #280]	@ (800103c <HAL_GPIO_Init+0x2f4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_Init+0x1e2>
 8000f26:	2305      	movs	r3, #5
 8000f28:	e00a      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	2103      	movs	r1, #3
 8000f44:	400a      	ands	r2, r1
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	@ (8001028 <HAL_GPIO_Init+0x2e0>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	035b      	lsls	r3, r3, #13
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	039b      	lsls	r3, r3, #14
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	029b      	lsls	r3, r3, #10
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001000:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	40da      	lsrs	r2, r3
 8001014:	1e13      	subs	r3, r2, #0
 8001016:	d000      	beq.n	800101a <HAL_GPIO_Init+0x2d2>
 8001018:	e6a2      	b.n	8000d60 <HAL_GPIO_Init+0x18>
  }
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b006      	add	sp, #24
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	50000400 	.word	0x50000400
 8001030:	50000800 	.word	0x50000800
 8001034:	50000c00 	.word	0x50000c00
 8001038:	50001000 	.word	0x50001000
 800103c:	50001c00 	.word	0x50001c00
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	000a      	movs	r2, r1
 800104e:	1cbb      	adds	r3, r7, #2
 8001050:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	1cba      	adds	r2, r7, #2
 8001058:	8812      	ldrh	r2, [r2, #0]
 800105a:	4013      	ands	r3, r2
 800105c:	d004      	beq.n	8001068 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800105e:	230f      	movs	r3, #15
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e003      	b.n	8001070 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	0008      	movs	r0, r1
 8001088:	0011      	movs	r1, r2
 800108a:	1cbb      	adds	r3, r7, #2
 800108c:	1c02      	adds	r2, r0, #0
 800108e:	801a      	strh	r2, [r3, #0]
 8001090:	1c7b      	adds	r3, r7, #1
 8001092:	1c0a      	adds	r2, r1, #0
 8001094:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001096:	1c7b      	adds	r3, r7, #1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	1cbb      	adds	r3, r7, #2
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010a6:	e003      	b.n	80010b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010a8:	1cbb      	adds	r3, r7, #2
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f000 fb6c 	bl	80017a4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010cc:	4bc8      	ldr	r3, [pc, #800]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	220c      	movs	r2, #12
 80010d2:	4013      	ands	r3, r2
 80010d4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010d6:	4bc6      	ldr	r3, [pc, #792]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	2380      	movs	r3, #128	@ 0x80
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	d100      	bne.n	80010ee <HAL_RCC_OscConfig+0x36>
 80010ec:	e07d      	b.n	80011ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d007      	beq.n	8001104 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b0c      	cmp	r3, #12
 80010f8:	d112      	bne.n	8001120 <HAL_RCC_OscConfig+0x68>
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	025b      	lsls	r3, r3, #9
 8001100:	429a      	cmp	r2, r3
 8001102:	d10d      	bne.n	8001120 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4bba      	ldr	r3, [pc, #744]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	029b      	lsls	r3, r3, #10
 800110c:	4013      	ands	r3, r2
 800110e:	d100      	bne.n	8001112 <HAL_RCC_OscConfig+0x5a>
 8001110:	e06a      	b.n	80011e8 <HAL_RCC_OscConfig+0x130>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d166      	bne.n	80011e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f000 fb42 	bl	80017a4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	025b      	lsls	r3, r3, #9
 8001128:	429a      	cmp	r2, r3
 800112a:	d107      	bne.n	800113c <HAL_RCC_OscConfig+0x84>
 800112c:	4bb0      	ldr	r3, [pc, #704]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4baf      	ldr	r3, [pc, #700]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001132:	2180      	movs	r1, #128	@ 0x80
 8001134:	0249      	lsls	r1, r1, #9
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e027      	b.n	800118c <HAL_RCC_OscConfig+0xd4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	23a0      	movs	r3, #160	@ 0xa0
 8001142:	02db      	lsls	r3, r3, #11
 8001144:	429a      	cmp	r2, r3
 8001146:	d10e      	bne.n	8001166 <HAL_RCC_OscConfig+0xae>
 8001148:	4ba9      	ldr	r3, [pc, #676]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4ba8      	ldr	r3, [pc, #672]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	02c9      	lsls	r1, r1, #11
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	4ba6      	ldr	r3, [pc, #664]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4ba5      	ldr	r3, [pc, #660]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	0249      	lsls	r1, r1, #9
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e012      	b.n	800118c <HAL_RCC_OscConfig+0xd4>
 8001166:	4ba2      	ldr	r3, [pc, #648]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4ba1      	ldr	r3, [pc, #644]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800116c:	49a1      	ldr	r1, [pc, #644]	@ (80013f4 <HAL_RCC_OscConfig+0x33c>)
 800116e:	400a      	ands	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	4b9f      	ldr	r3, [pc, #636]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	@ 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	4013      	ands	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4b9b      	ldr	r3, [pc, #620]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b9a      	ldr	r3, [pc, #616]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001186:	499c      	ldr	r1, [pc, #624]	@ (80013f8 <HAL_RCC_OscConfig+0x340>)
 8001188:	400a      	ands	r2, r1
 800118a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d014      	beq.n	80011be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fd1a 	bl	8000bcc <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119e:	f7ff fd15 	bl	8000bcc <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	@ 0x64
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e2f9      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b0:	4b8f      	ldr	r3, [pc, #572]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0xe6>
 80011bc:	e015      	b.n	80011ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fd05 	bl	8000bcc <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fd00 	bl	8000bcc <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	@ 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e2e4      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011da:	4b85      	ldr	r3, [pc, #532]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x110>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x13e>
 80011f4:	e099      	b.n	800132a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	2220      	movs	r2, #32
 8001200:	4013      	ands	r3, r2
 8001202:	d009      	beq.n	8001218 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001204:	4b7a      	ldr	r3, [pc, #488]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b79      	ldr	r3, [pc, #484]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800120a:	2120      	movs	r1, #32
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	2220      	movs	r2, #32
 8001214:	4393      	bics	r3, r2
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b04      	cmp	r3, #4
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2b0c      	cmp	r3, #12
 8001222:	d13e      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1ea>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d13b      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800122a:	4b71      	ldr	r3, [pc, #452]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2204      	movs	r2, #4
 8001230:	4013      	ands	r3, r2
 8001232:	d004      	beq.n	800123e <HAL_RCC_OscConfig+0x186>
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e2b2      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b6c      	ldr	r3, [pc, #432]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4a6e      	ldr	r2, [pc, #440]	@ (80013fc <HAL_RCC_OscConfig+0x344>)
 8001244:	4013      	ands	r3, r2
 8001246:	0019      	movs	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	4b68      	ldr	r3, [pc, #416]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001254:	4b66      	ldr	r3, [pc, #408]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2209      	movs	r2, #9
 800125a:	4393      	bics	r3, r2
 800125c:	0019      	movs	r1, r3
 800125e:	4b64      	ldr	r3, [pc, #400]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001266:	f000 fbeb 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 800126a:	0001      	movs	r1, r0
 800126c:	4b60      	ldr	r3, [pc, #384]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	220f      	movs	r2, #15
 8001274:	4013      	ands	r3, r2
 8001276:	4a62      	ldr	r2, [pc, #392]	@ (8001400 <HAL_RCC_OscConfig+0x348>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	000a      	movs	r2, r1
 800127c:	40da      	lsrs	r2, r3
 800127e:	4b61      	ldr	r3, [pc, #388]	@ (8001404 <HAL_RCC_OscConfig+0x34c>)
 8001280:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001282:	4b61      	ldr	r3, [pc, #388]	@ (8001408 <HAL_RCC_OscConfig+0x350>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2513      	movs	r5, #19
 8001288:	197c      	adds	r4, r7, r5
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff fc58 	bl	8000b40 <HAL_InitTick>
 8001290:	0003      	movs	r3, r0
 8001292:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001294:	197b      	adds	r3, r7, r5
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d046      	beq.n	800132a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800129c:	197b      	adds	r3, r7, r5
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	e280      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d027      	beq.n	80012f8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012a8:	4b51      	ldr	r3, [pc, #324]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2209      	movs	r2, #9
 80012ae:	4393      	bics	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	4b4f      	ldr	r3, [pc, #316]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fc87 	bl	8000bcc <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc82 	bl	8000bcc <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e266      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d6:	4b46      	ldr	r3, [pc, #280]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2204      	movs	r2, #4
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f1      	beq.n	80012c4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b43      	ldr	r3, [pc, #268]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a45      	ldr	r2, [pc, #276]	@ (80013fc <HAL_RCC_OscConfig+0x344>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	021a      	lsls	r2, r3, #8
 80012f0:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e018      	b.n	800132a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f8:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80012fe:	2101      	movs	r1, #1
 8001300:	438a      	bics	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc62 	bl	8000bcc <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc5d 	bl	8000bcc <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e241      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2204      	movs	r2, #4
 8001326:	4013      	ands	r3, r2
 8001328:	d1f1      	bne.n	800130e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2210      	movs	r2, #16
 8001330:	4013      	ands	r3, r2
 8001332:	d100      	bne.n	8001336 <HAL_RCC_OscConfig+0x27e>
 8001334:	e0a1      	b.n	800147a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d140      	bne.n	80013be <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133c:	4b2c      	ldr	r3, [pc, #176]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d005      	beq.n	8001354 <HAL_RCC_OscConfig+0x29c>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e227      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001354:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a2c      	ldr	r2, [pc, #176]	@ (800140c <HAL_RCC_OscConfig+0x354>)
 800135a:	4013      	ands	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001368:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	0a19      	lsrs	r1, r3, #8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	061a      	lsls	r2, r3, #24
 8001376:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	0b5b      	lsrs	r3, r3, #13
 8001382:	3301      	adds	r3, #1
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	210f      	movs	r1, #15
 8001392:	400b      	ands	r3, r1
 8001394:	491a      	ldr	r1, [pc, #104]	@ (8001400 <HAL_RCC_OscConfig+0x348>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_RCC_OscConfig+0x34c>)
 800139c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_RCC_OscConfig+0x350>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2513      	movs	r5, #19
 80013a4:	197c      	adds	r4, r7, r5
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff fbca 	bl	8000b40 <HAL_InitTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013b0:	197b      	adds	r3, r7, r5
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d060      	beq.n	800147a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80013b8:	197b      	adds	r3, r7, r5
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	e1f2      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d03f      	beq.n	8001446 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_RCC_OscConfig+0x338>)
 80013cc:	2180      	movs	r1, #128	@ 0x80
 80013ce:	0049      	lsls	r1, r1, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbfa 	bl	8000bcc <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013dc:	e018      	b.n	8001410 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013de:	f7ff fbf5 	bl	8000bcc <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d911      	bls.n	8001410 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1d9      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
 80013f0:	40021000 	.word	0x40021000
 80013f4:	fffeffff 	.word	0xfffeffff
 80013f8:	fffbffff 	.word	0xfffbffff
 80013fc:	ffffe0ff 	.word	0xffffe0ff
 8001400:	08004810 	.word	0x08004810
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004
 800140c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001410:	4bc9      	ldr	r3, [pc, #804]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d0e0      	beq.n	80013de <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141c:	4bc6      	ldr	r3, [pc, #792]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4ac6      	ldr	r2, [pc, #792]	@ (800173c <HAL_RCC_OscConfig+0x684>)
 8001422:	4013      	ands	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1a      	ldr	r2, [r3, #32]
 800142a:	4bc3      	ldr	r3, [pc, #780]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800142c:	430a      	orrs	r2, r1
 800142e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001430:	4bc1      	ldr	r3, [pc, #772]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	0a19      	lsrs	r1, r3, #8
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	061a      	lsls	r2, r3, #24
 800143e:	4bbe      	ldr	r3, [pc, #760]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	e019      	b.n	800147a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001446:	4bbc      	ldr	r3, [pc, #752]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4bbb      	ldr	r3, [pc, #748]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800144c:	49bc      	ldr	r1, [pc, #752]	@ (8001740 <HAL_RCC_OscConfig+0x688>)
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fbbb 	bl	8000bcc <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145c:	f7ff fbb6 	bl	8000bcc <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e19a      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800146e:	4bb2      	ldr	r3, [pc, #712]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4013      	ands	r3, r2
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2208      	movs	r2, #8
 8001480:	4013      	ands	r3, r2
 8001482:	d036      	beq.n	80014f2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d019      	beq.n	80014c0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148c:	4baa      	ldr	r3, [pc, #680]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800148e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001490:	4ba9      	ldr	r3, [pc, #676]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fb98 	bl	8000bcc <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fb93 	bl	8000bcc <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e177      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80014b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0f1      	beq.n	80014a2 <HAL_RCC_OscConfig+0x3ea>
 80014be:	e018      	b.n	80014f2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80014c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	438a      	bics	r2, r1
 80014ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff fb7e 	bl	8000bcc <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb79 	bl	8000bcc <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e15d      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e8:	4b93      	ldr	r3, [pc, #588]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80014ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d1f1      	bne.n	80014d6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_OscConfig+0x446>
 80014fc:	e0ae      	b.n	800165c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2023      	movs	r0, #35	@ 0x23
 8001500:	183b      	adds	r3, r7, r0
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001506:	4b8c      	ldr	r3, [pc, #560]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	055b      	lsls	r3, r3, #21
 800150e:	4013      	ands	r3, r2
 8001510:	d109      	bne.n	8001526 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b89      	ldr	r3, [pc, #548]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001516:	4b88      	ldr	r3, [pc, #544]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0549      	lsls	r1, r1, #21
 800151c:	430a      	orrs	r2, r1
 800151e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001520:	183b      	adds	r3, r7, r0
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b87      	ldr	r3, [pc, #540]	@ (8001744 <HAL_RCC_OscConfig+0x68c>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4013      	ands	r3, r2
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b84      	ldr	r3, [pc, #528]	@ (8001744 <HAL_RCC_OscConfig+0x68c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b83      	ldr	r3, [pc, #524]	@ (8001744 <HAL_RCC_OscConfig+0x68c>)
 8001538:	2180      	movs	r1, #128	@ 0x80
 800153a:	0049      	lsls	r1, r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff fb44 	bl	8000bcc <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fb3f 	bl	8000bcc <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	@ 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e123      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b79      	ldr	r3, [pc, #484]	@ (8001744 <HAL_RCC_OscConfig+0x68c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4013      	ands	r3, r2
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x4cc>
 8001574:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001578:	4b6f      	ldr	r3, [pc, #444]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	0049      	lsls	r1, r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	651a      	str	r2, [r3, #80]	@ 0x50
 8001582:	e031      	b.n	80015e8 <HAL_RCC_OscConfig+0x530>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4ee>
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800158e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001590:	4b69      	ldr	r3, [pc, #420]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001592:	496b      	ldr	r1, [pc, #428]	@ (8001740 <HAL_RCC_OscConfig+0x688>)
 8001594:	400a      	ands	r2, r1
 8001596:	651a      	str	r2, [r3, #80]	@ 0x50
 8001598:	4b67      	ldr	r3, [pc, #412]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800159a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800159c:	4b66      	ldr	r3, [pc, #408]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800159e:	496a      	ldr	r1, [pc, #424]	@ (8001748 <HAL_RCC_OscConfig+0x690>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80015a4:	e020      	b.n	80015e8 <HAL_RCC_OscConfig+0x530>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	23a0      	movs	r3, #160	@ 0xa0
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d10e      	bne.n	80015d0 <HAL_RCC_OscConfig+0x518>
 80015b2:	4b61      	ldr	r3, [pc, #388]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015b6:	4b60      	ldr	r3, [pc, #384]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015b8:	2180      	movs	r1, #128	@ 0x80
 80015ba:	00c9      	lsls	r1, r1, #3
 80015bc:	430a      	orrs	r2, r1
 80015be:	651a      	str	r2, [r3, #80]	@ 0x50
 80015c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015c6:	2180      	movs	r1, #128	@ 0x80
 80015c8:	0049      	lsls	r1, r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x530>
 80015d0:	4b59      	ldr	r3, [pc, #356]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015d4:	4b58      	ldr	r3, [pc, #352]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015d6:	495a      	ldr	r1, [pc, #360]	@ (8001740 <HAL_RCC_OscConfig+0x688>)
 80015d8:	400a      	ands	r2, r1
 80015da:	651a      	str	r2, [r3, #80]	@ 0x50
 80015dc:	4b56      	ldr	r3, [pc, #344]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015e0:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80015e2:	4959      	ldr	r1, [pc, #356]	@ (8001748 <HAL_RCC_OscConfig+0x690>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff faec 	bl	8000bcc <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f8:	e009      	b.n	800160e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fae7 	bl	8000bcc <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	4a51      	ldr	r2, [pc, #324]	@ (800174c <HAL_RCC_OscConfig+0x694>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0ca      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800160e:	4b4a      	ldr	r3, [pc, #296]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d0ef      	beq.n	80015fa <HAL_RCC_OscConfig+0x542>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fad6 	bl	8000bcc <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001624:	e009      	b.n	800163a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fad1 	bl	8000bcc <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	4a46      	ldr	r2, [pc, #280]	@ (800174c <HAL_RCC_OscConfig+0x694>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b4      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800163a:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800163c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4013      	ands	r3, r2
 8001644:	d1ef      	bne.n	8001626 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001646:	2323      	movs	r3, #35	@ 0x23
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001652:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001654:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001656:	493e      	ldr	r1, [pc, #248]	@ (8001750 <HAL_RCC_OscConfig+0x698>)
 8001658:	400a      	ands	r2, r1
 800165a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x5ae>
 8001664:	e09d      	b.n	80017a2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x5b6>
 800166c:	e076      	b.n	800175c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	2b02      	cmp	r3, #2
 8001674:	d145      	bne.n	8001702 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b30      	ldr	r3, [pc, #192]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800167c:	4935      	ldr	r1, [pc, #212]	@ (8001754 <HAL_RCC_OscConfig+0x69c>)
 800167e:	400a      	ands	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff faa3 	bl	8000bcc <HAL_GetTick>
 8001686:	0003      	movs	r3, r0
 8001688:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff fa9e 	bl	8000bcc <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e082      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800169e:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	049b      	lsls	r3, r3, #18
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001758 <HAL_RCC_OscConfig+0x6a0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	431a      	orrs	r2, r3
 80016c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80016c6:	430a      	orrs	r2, r1
 80016c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	0449      	lsls	r1, r1, #17
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fa78 	bl	8000bcc <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fa73 	bl	8000bcc <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e057      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016f4:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	049b      	lsls	r3, r3, #18
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x62a>
 8001700:	e04f      	b.n	80017a2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 8001708:	4912      	ldr	r1, [pc, #72]	@ (8001754 <HAL_RCC_OscConfig+0x69c>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fa5d 	bl	8000bcc <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fa58 	bl	8000bcc <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e03c      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800172a:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_RCC_OscConfig+0x680>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x660>
 8001736:	e034      	b.n	80017a2 <HAL_RCC_OscConfig+0x6ea>
 8001738:	40021000 	.word	0x40021000
 800173c:	ffff1fff 	.word	0xffff1fff
 8001740:	fffffeff 	.word	0xfffffeff
 8001744:	40007000 	.word	0x40007000
 8001748:	fffffbff 	.word	0xfffffbff
 800174c:	00001388 	.word	0x00001388
 8001750:	efffffff 	.word	0xefffffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e01d      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001768:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_RCC_OscConfig+0x6f4>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	429a      	cmp	r2, r3
 800177c:	d10f      	bne.n	800179e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	23f0      	movs	r3, #240	@ 0xf0
 8001782:	039b      	lsls	r3, r3, #14
 8001784:	401a      	ands	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d107      	bne.n	800179e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	23c0      	movs	r3, #192	@ 0xc0
 8001792:	041b      	lsls	r3, r3, #16
 8001794:	401a      	ands	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b00a      	add	sp, #40	@ 0x28
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e128      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b96      	ldr	r3, [pc, #600]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d91e      	bls.n	8001810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b93      	ldr	r3, [pc, #588]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b90      	ldr	r3, [pc, #576]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e4:	f7ff f9f2 	bl	8000bcc <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff f9ed 	bl	8000bcc <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a8a      	ldr	r2, [pc, #552]	@ (8001a24 <HAL_RCC_ClockConfig+0x274>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e109      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b87      	ldr	r3, [pc, #540]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181a:	4b83      	ldr	r3, [pc, #524]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	22f0      	movs	r2, #240	@ 0xf0
 8001820:	4393      	bics	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b7f      	ldr	r3, [pc, #508]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 800182a:	430a      	orrs	r2, r1
 800182c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d100      	bne.n	800183a <HAL_RCC_ClockConfig+0x8a>
 8001838:	e089      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001842:	4b79      	ldr	r3, [pc, #484]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d120      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0e1      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800185a:	4b73      	ldr	r3, [pc, #460]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	4013      	ands	r3, r2
 8001864:	d114      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0d5      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d106      	bne.n	8001880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001872:	4b6d      	ldr	r3, [pc, #436]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2204      	movs	r2, #4
 8001878:	4013      	ands	r3, r2
 800187a:	d109      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0ca      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001880:	4b69      	ldr	r3, [pc, #420]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0c2      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001890:	4b65      	ldr	r3, [pc, #404]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2203      	movs	r2, #3
 8001896:	4393      	bics	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4b62      	ldr	r3, [pc, #392]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f992 	bl	8000bcc <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	e009      	b.n	80018ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b6:	f7ff f989 	bl	8000bcc <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <HAL_RCC_ClockConfig+0x274>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0a5      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ca:	4b57      	ldr	r3, [pc, #348]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	220c      	movs	r2, #12
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d1ef      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x106>
 80018d6:	e03a      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d111      	bne.n	8001904 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7ff f973 	bl	8000bcc <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001a24 <HAL_RCC_ClockConfig+0x274>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e08f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	220c      	movs	r2, #12
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_ClockConfig+0x132>
 8001902:	e024      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d11b      	bne.n	8001944 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f95d 	bl	8000bcc <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a42      	ldr	r2, [pc, #264]	@ (8001a24 <HAL_RCC_ClockConfig+0x274>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e079      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001922:	4b41      	ldr	r3, [pc, #260]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	220c      	movs	r2, #12
 8001928:	4013      	ands	r3, r2
 800192a:	2b04      	cmp	r3, #4
 800192c:	d1ef      	bne.n	800190e <HAL_RCC_ClockConfig+0x15e>
 800192e:	e00e      	b.n	800194e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff f94c 	bl	8000bcc <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a24 <HAL_RCC_ClockConfig+0x274>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e068      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001944:	4b38      	ldr	r3, [pc, #224]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	220c      	movs	r2, #12
 800194a:	4013      	ands	r3, r2
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d21e      	bcs.n	800199a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	4b30      	ldr	r3, [pc, #192]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4393      	bics	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	4b2e      	ldr	r3, [pc, #184]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800196e:	f7ff f92d 	bl	8000bcc <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	e009      	b.n	800198c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f928 	bl	8000bcc <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a28      	ldr	r2, [pc, #160]	@ (8001a24 <HAL_RCC_ClockConfig+0x274>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e044      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_RCC_ClockConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d1ee      	bne.n	8001978 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <HAL_RCC_ClockConfig+0x27c>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2208      	movs	r2, #8
 80019be:	4013      	ands	r3, r2
 80019c0:	d00a      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001a30 <HAL_RCC_ClockConfig+0x280>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	00da      	lsls	r2, r3, #3
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d8:	f000 f832 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019dc:	0001      	movs	r1, r0
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_RCC_ClockConfig+0x278>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <HAL_RCC_ClockConfig+0x284>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_RCC_ClockConfig+0x288>)
 80019f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_RCC_ClockConfig+0x28c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	250b      	movs	r5, #11
 80019fa:	197c      	adds	r4, r7, r5
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff f89f 	bl	8000b40 <HAL_InitTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a06:	197b      	adds	r3, r7, r5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a0e:	197b      	adds	r3, r7, r5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	e000      	b.n	8001a16 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	40022000 	.word	0x40022000
 8001a24:	00001388 	.word	0x00001388
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	fffff8ff 	.word	0xfffff8ff
 8001a30:	ffffc7ff 	.word	0xffffc7ff
 8001a34:	08004810 	.word	0x08004810
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	@ 0x38
 8001a44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a46:	4b4c      	ldr	r3, [pc, #304]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a4e:	230c      	movs	r3, #12
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d014      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x40>
 8001a56:	d900      	bls.n	8001a5a <HAL_RCC_GetSysClockFreq+0x1a>
 8001a58:	e07b      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x112>
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x24>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d00b      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e076      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a64:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a6e:	4b43      	ldr	r3, [pc, #268]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a70:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a72:	e07c      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a74:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a78:	e079      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a7a:	4b42      	ldr	r3, [pc, #264]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a7c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a7e:	e076      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	230f      	movs	r3, #15
 8001a86:	401a      	ands	r2, r3
 8001a88:	4b3f      	ldr	r3, [pc, #252]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a90:	0d9a      	lsrs	r2, r3, #22
 8001a92:	2303      	movs	r3, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	3301      	adds	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a9a:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d01a      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	4a35      	ldr	r2, [pc, #212]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	69b8      	ldr	r0, [r7, #24]
 8001ab4:	69f9      	ldr	r1, [r7, #28]
 8001ab6:	f7fe fbd3 	bl	8000260 <__aeabi_lmul>
 8001aba:	0002      	movs	r2, r0
 8001abc:	000b      	movs	r3, r1
 8001abe:	0010      	movs	r0, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f7fe fba7 	bl	8000220 <__aeabi_uldivmod>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ada:	e037      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001adc:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d01a      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4a23      	ldr	r2, [pc, #140]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001af0:	2300      	movs	r3, #0
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	f7fe fbb3 	bl	8000260 <__aeabi_lmul>
 8001afa:	0002      	movs	r2, r0
 8001afc:	000b      	movs	r3, r1
 8001afe:	0010      	movs	r0, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f7fe fb87 	bl	8000220 <__aeabi_uldivmod>
 8001b12:	0002      	movs	r2, r0
 8001b14:	000b      	movs	r3, r1
 8001b16:	0013      	movs	r3, r2
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b1a:	e017      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1e:	0018      	movs	r0, r3
 8001b20:	2300      	movs	r3, #0
 8001b22:	0019      	movs	r1, r3
 8001b24:	4a16      	ldr	r2, [pc, #88]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b26:	2300      	movs	r3, #0
 8001b28:	f7fe fb9a 	bl	8000260 <__aeabi_lmul>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	000b      	movs	r3, r1
 8001b30:	0010      	movs	r0, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	001c      	movs	r4, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	001d      	movs	r5, r3
 8001b3c:	0022      	movs	r2, r4
 8001b3e:	002b      	movs	r3, r5
 8001b40:	f7fe fb6e 	bl	8000220 <__aeabi_uldivmod>
 8001b44:	0002      	movs	r2, r0
 8001b46:	000b      	movs	r3, r1
 8001b48:	0013      	movs	r3, r2
 8001b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b50:	e00d      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0b5b      	lsrs	r3, r3, #13
 8001b58:	2207      	movs	r2, #7
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	3301      	adds	r3, #1
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	0212      	lsls	r2, r2, #8
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b00e      	add	sp, #56	@ 0x38
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	003d0900 	.word	0x003d0900
 8001b80:	00f42400 	.word	0x00f42400
 8001b84:	007a1200 	.word	0x007a1200
 8001b88:	08004820 	.word	0x08004820

08001b8c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b94:	2017      	movs	r0, #23
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001ba6:	e0c7      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba8:	4b84      	ldr	r3, [pc, #528]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	055b      	lsls	r3, r3, #21
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b81      	ldr	r3, [pc, #516]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bb8:	4b80      	ldr	r3, [pc, #512]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bba:	2180      	movs	r1, #128	@ 0x80
 8001bbc:	0549      	lsls	r1, r1, #21
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001bc2:	183b      	adds	r3, r7, r0
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d11a      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd4:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b79      	ldr	r3, [pc, #484]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001bda:	2180      	movs	r1, #128	@ 0x80
 8001bdc:	0049      	lsls	r1, r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7fe fff3 	bl	8000bcc <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	e008      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7fe ffee 	bl	8000bcc <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0d9      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b70      	ldr	r3, [pc, #448]	@ (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	23c0      	movs	r3, #192	@ 0xc0
 8001c10:	039b      	lsls	r3, r3, #14
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	23c0      	movs	r3, #192	@ 0xc0
 8001c1c:	039b      	lsls	r3, r3, #14
 8001c1e:	4013      	ands	r3, r2
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d013      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	23c0      	movs	r3, #192	@ 0xc0
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	401a      	ands	r2, r3
 8001c30:	23c0      	movs	r3, #192	@ 0xc0
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10a      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c38:	4b60      	ldr	r3, [pc, #384]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	401a      	ands	r2, r3
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d101      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0b1      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c52:	23c0      	movs	r3, #192	@ 0xc0
 8001c54:	029b      	lsls	r3, r3, #10
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03b      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	23c0      	movs	r3, #192	@ 0xc0
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	4013      	ands	r3, r2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d033      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2220      	movs	r2, #32
 8001c76:	4013      	ands	r3, r2
 8001c78:	d02e      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c7a:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c7e:	4a51      	ldr	r2, [pc, #324]	@ (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c84:	4b4d      	ldr	r3, [pc, #308]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c88:	4b4c      	ldr	r3, [pc, #304]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	0309      	lsls	r1, r1, #12
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c92:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c96:	4b49      	ldr	r3, [pc, #292]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c98:	494b      	ldr	r1, [pc, #300]	@ (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	d014      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7fe ff8d 	bl	8000bcc <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb6:	e009      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7fe ff88 	bl	8000bcc <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	4a42      	ldr	r2, [pc, #264]	@ (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e072      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0ef      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d01f      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	23c0      	movs	r3, #192	@ 0xc0
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	401a      	ands	r2, r3
 8001cec:	23c0      	movs	r3, #192	@ 0xc0
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d10c      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001cf4:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a35      	ldr	r2, [pc, #212]	@ (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	23c0      	movs	r3, #192	@ 0xc0
 8001d04:	039b      	lsls	r3, r3, #14
 8001d06:	401a      	ands	r2, r3
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	23c0      	movs	r3, #192	@ 0xc0
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d22:	2317      	movs	r3, #23
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d32:	4928      	ldr	r1, [pc, #160]	@ (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d42:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	220c      	movs	r2, #12
 8001d48:	4393      	bics	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d64:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a16      	ldr	r2, [pc, #88]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da0:	4a0f      	ldr	r2, [pc, #60]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b006      	add	sp, #24
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	fffcffff 	.word	0xfffcffff
 8001dc8:	fff7ffff 	.word	0xfff7ffff
 8001dcc:	00001388 	.word	0x00001388
 8001dd0:	ffcfffff 	.word	0xffcfffff
 8001dd4:	efffffff 	.word	0xefffffff
 8001dd8:	fffff3ff 	.word	0xfffff3ff
 8001ddc:	ffffcfff 	.word	0xffffcfff
 8001de0:	fff3ffff 	.word	0xfff3ffff

08001de4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001de8:	46c0      	nop			@ (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001df6:	f3ef 8305 	mrs	r3, IPSR
 8001dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e02:	f3ef 8310 	mrs	r3, PRIMASK
 8001e06:	607b      	str	r3, [r7, #4]
  return(result);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <osKernelInitialize+0x2e>
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <osKernelInitialize+0x54>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d103      	bne.n	8001e1e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8001e16:	2306      	movs	r3, #6
 8001e18:	425b      	negs	r3, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e00c      	b.n	8001e38 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <osKernelInitialize+0x54>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <osKernelInitialize+0x54>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e002      	b.n	8001e38 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8001e32:	2301      	movs	r3, #1
 8001e34:	425b      	negs	r3, r3
 8001e36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	2000003c 	.word	0x2000003c

08001e48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4e:	f3ef 8305 	mrs	r3, IPSR
 8001e52:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5e:	607b      	str	r3, [r7, #4]
  return(result);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <osKernelStart+0x2e>
 8001e66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <osKernelStart+0x5c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d103      	bne.n	8001e76 <osKernelStart+0x2e>
    stat = osErrorISR;
 8001e6e:	2306      	movs	r3, #6
 8001e70:	425b      	negs	r3, r3
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e010      	b.n	8001e98 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <osKernelStart+0x5c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d109      	bne.n	8001e92 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e7e:	f7ff ffb1 	bl	8001de4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <osKernelStart+0x5c>)
 8001e84:	2202      	movs	r2, #2
 8001e86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e88:	f001 f98e 	bl	80031a8 <vTaskStartScheduler>
      stat = osOK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e002      	b.n	8001e98 <osKernelStart+0x50>
    } else {
      stat = osError;
 8001e92:	2301      	movs	r3, #1
 8001e94:	425b      	negs	r3, r3
 8001e96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	2000003c 	.word	0x2000003c

08001ea8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b090      	sub	sp, #64	@ 0x40
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eb8:	f3ef 8305 	mrs	r3, IPSR
 8001ebc:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ebe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d000      	beq.n	8001ec6 <osThreadNew+0x1e>
 8001ec4:	e08c      	b.n	8001fe0 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eca:	61bb      	str	r3, [r7, #24]
  return(result);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <osThreadNew+0x34>
 8001ed2:	4b46      	ldr	r3, [pc, #280]	@ (8001fec <osThreadNew+0x144>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d100      	bne.n	8001edc <osThreadNew+0x34>
 8001eda:	e081      	b.n	8001fe0 <osThreadNew+0x138>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d100      	bne.n	8001ee4 <osThreadNew+0x3c>
 8001ee2:	e07d      	b.n	8001fe0 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001ee8:	2318      	movs	r3, #24
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	425b      	negs	r3, r3
 8001ef4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d044      	beq.n	8001f86 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <osThreadNew+0x62>
        name = attr->name;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <osThreadNew+0x86>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	2b38      	cmp	r3, #56	@ 0x38
 8001f22:	d804      	bhi.n	8001f2e <osThreadNew+0x86>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d001      	beq.n	8001f32 <osThreadNew+0x8a>
        return (NULL);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e057      	b.n	8001fe2 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <osThreadNew+0xc0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f50:	d90a      	bls.n	8001f68 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <osThreadNew+0xc0>
        mem = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	e010      	b.n	8001f8a <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <osThreadNew+0xe2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d108      	bne.n	8001f8a <osThreadNew+0xe2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <osThreadNew+0xe2>
          mem = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	e001      	b.n	8001f8a <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d112      	bne.n	8001fb6 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f98:	68bd      	ldr	r5, [r7, #8]
 8001f9a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8001f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	9201      	str	r2, [sp, #4]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	002b      	movs	r3, r5
 8001faa:	0022      	movs	r2, r4
 8001fac:	f000 ff51 	bl	8002e52 <xTaskCreateStatic>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e014      	b.n	8001fe0 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68bc      	ldr	r4, [r7, #8]
 8001fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	2314      	movs	r3, #20
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	0023      	movs	r3, r4
 8001fd2:	f000 ff85 	bl	8002ee0 <xTaskCreate>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d001      	beq.n	8001fe0 <osThreadNew+0x138>
          hTask = NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fe0:	697b      	ldr	r3, [r7, #20]
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b00c      	add	sp, #48	@ 0x30
 8001fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	2000003c 	.word	0x2000003c

08001ff0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ff8:	f3ef 8305 	mrs	r3, IPSR
 8001ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8001ffe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002004:	f3ef 8310 	mrs	r3, PRIMASK
 8002008:	60fb      	str	r3, [r7, #12]
  return(result);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <osDelay+0x30>
 8002010:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <osDelay+0x4c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d103      	bne.n	8002020 <osDelay+0x30>
    stat = osErrorISR;
 8002018:	2306      	movs	r3, #6
 800201a:	425b      	negs	r3, r3
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e008      	b.n	8002032 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <osDelay+0x42>
      vTaskDelay(ticks);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f001 f895 	bl	800315c <vTaskDelay>
    }
  }

  return (stat);
 8002032:	697b      	ldr	r3, [r7, #20]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b006      	add	sp, #24
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000003c 	.word	0x2000003c

08002040 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b08d      	sub	sp, #52	@ 0x34
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002050:	f3ef 8305 	mrs	r3, IPSR
 8002054:	61bb      	str	r3, [r7, #24]
  return(result);
 8002056:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002058:	2b00      	cmp	r3, #0
 800205a:	d000      	beq.n	800205e <osMessageQueueNew+0x1e>
 800205c:	e06f      	b.n	800213e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800205e:	f3ef 8310 	mrs	r3, PRIMASK
 8002062:	617b      	str	r3, [r7, #20]
  return(result);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <osMessageQueueNew+0x34>
 800206a:	4b37      	ldr	r3, [pc, #220]	@ (8002148 <osMessageQueueNew+0x108>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d100      	bne.n	8002074 <osMessageQueueNew+0x34>
 8002072:	e064      	b.n	800213e <osMessageQueueNew+0xfe>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d100      	bne.n	800207c <osMessageQueueNew+0x3c>
 800207a:	e060      	b.n	800213e <osMessageQueueNew+0xfe>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d05d      	beq.n	800213e <osMessageQueueNew+0xfe>
    mem = -1;
 8002082:	2301      	movs	r3, #1
 8002084:	425b      	negs	r3, r3
 8002086:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d028      	beq.n	80020e0 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d011      	beq.n	80020ba <osMessageQueueNew+0x7a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b4f      	cmp	r3, #79	@ 0x4f
 800209c:	d90d      	bls.n	80020ba <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	434b      	muls	r3, r1
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d302      	bcc.n	80020ba <osMessageQueueNew+0x7a>
        mem = 1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	e014      	b.n	80020e4 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d110      	bne.n	80020e4 <osMessageQueueNew+0xa4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d104      	bne.n	80020e4 <osMessageQueueNew+0xa4>
          mem = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
 80020de:	e001      	b.n	80020e4 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10c      	bne.n	8002104 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	2400      	movs	r4, #0
 80020f8:	9400      	str	r4, [sp, #0]
 80020fa:	f000 fa27 	bl	800254c <xQueueGenericCreateStatic>
 80020fe:	0003      	movs	r3, r0
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
 8002102:	e00a      	b.n	800211a <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	0018      	movs	r0, r3
 8002112:	f000 fa6c 	bl	80025ee <xQueueGenericCreate>
 8002116:	0003      	movs	r3, r0
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <osMessageQueueNew+0xee>
        name = attr->name;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	e001      	b.n	8002132 <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f000 fe2f 	bl	8002d9c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b00b      	add	sp, #44	@ 0x2c
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	2000003c 	.word	0x2000003c

0800214c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002164:	f3ef 8305 	mrs	r3, IPSR
 8002168:	61fb      	str	r3, [r7, #28]
  return(result);
 800216a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002170:	f3ef 8310 	mrs	r3, PRIMASK
 8002174:	61bb      	str	r3, [r7, #24]
  return(result);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d028      	beq.n	80021ce <osMessageQueuePut+0x82>
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <osMessageQueuePut+0xcc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d124      	bne.n	80021ce <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <osMessageQueuePut+0x4a>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <osMessageQueuePut+0x4a>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 8002196:	2304      	movs	r3, #4
 8002198:	425b      	negs	r3, r3
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800219c:	e035      	b.n	800220a <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80021a2:	2314      	movs	r3, #20
 80021a4:	18fa      	adds	r2, r7, r3
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6a38      	ldr	r0, [r7, #32]
 80021aa:	2300      	movs	r3, #0
 80021ac:	f000 fb47 	bl	800283e <xQueueGenericSendFromISR>
 80021b0:	0003      	movs	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d003      	beq.n	80021be <osMessageQueuePut+0x72>
        stat = osErrorResource;
 80021b6:	2303      	movs	r3, #3
 80021b8:	425b      	negs	r3, r3
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80021bc:	e025      	b.n	800220a <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d022      	beq.n	800220a <osMessageQueuePut+0xbe>
 80021c4:	4b15      	ldr	r3, [pc, #84]	@ (800221c <osMessageQueuePut+0xd0>)
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	0552      	lsls	r2, r2, #21
 80021ca:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80021cc:	e01d      	b.n	800220a <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <osMessageQueuePut+0x8e>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 80021da:	2304      	movs	r3, #4
 80021dc:	425b      	negs	r3, r3
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e0:	e014      	b.n	800220c <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6a38      	ldr	r0, [r7, #32]
 80021e8:	2300      	movs	r3, #0
 80021ea:	f000 fa60 	bl	80026ae <xQueueGenericSend>
 80021ee:	0003      	movs	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d00b      	beq.n	800220c <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 80021fa:	2302      	movs	r3, #2
 80021fc:	425b      	negs	r3, r3
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002200:	e004      	b.n	800220c <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 8002202:	2303      	movs	r3, #3
 8002204:	425b      	negs	r3, r3
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
 8002208:	e000      	b.n	800220c <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800220a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b00a      	add	sp, #40	@ 0x28
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	2000003c 	.word	0x2000003c
 800221c:	e000ed04 	.word	0xe000ed04

08002220 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	@ 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002236:	f3ef 8305 	mrs	r3, IPSR
 800223a:	61fb      	str	r3, [r7, #28]
  return(result);
 800223c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	61bb      	str	r3, [r7, #24]
  return(result);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d028      	beq.n	80022a0 <osMessageQueueGet+0x80>
 800224e:	4b26      	ldr	r3, [pc, #152]	@ (80022e8 <osMessageQueueGet+0xc8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d124      	bne.n	80022a0 <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <osMessageQueueGet+0x48>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <osMessageQueueGet+0x48>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 8002268:	2304      	movs	r3, #4
 800226a:	425b      	negs	r3, r3
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800226e:	e035      	b.n	80022dc <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002274:	2314      	movs	r3, #20
 8002276:	18fa      	adds	r2, r7, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fc0a 	bl	8002a96 <xQueueReceiveFromISR>
 8002282:	0003      	movs	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d003      	beq.n	8002290 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 8002288:	2303      	movs	r3, #3
 800228a:	425b      	negs	r3, r3
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800228e:	e025      	b.n	80022dc <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d022      	beq.n	80022dc <osMessageQueueGet+0xbc>
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <osMessageQueueGet+0xcc>)
 8002298:	2280      	movs	r2, #128	@ 0x80
 800229a:	0552      	lsls	r2, r2, #21
 800229c:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800229e:	e01d      	b.n	80022dc <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <osMessageQueueGet+0x8c>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 80022ac:	2304      	movs	r3, #4
 80022ae:	425b      	negs	r3, r3
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b2:	e014      	b.n	80022de <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fb33 	bl	8002926 <xQueueReceive>
 80022c0:	0003      	movs	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d00b      	beq.n	80022de <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 80022cc:	2302      	movs	r3, #2
 80022ce:	425b      	negs	r3, r3
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d2:	e004      	b.n	80022de <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 80022d4:	2303      	movs	r3, #3
 80022d6:	425b      	negs	r3, r3
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022da:	e000      	b.n	80022de <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80022dc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b00a      	add	sp, #40	@ 0x28
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000003c 	.word	0x2000003c
 80022ec:	e000ed04 	.word	0xe000ed04

080022f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a06      	ldr	r2, [pc, #24]	@ (8002318 <vApplicationGetIdleTaskMemory+0x28>)
 8002300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4a05      	ldr	r2, [pc, #20]	@ (800231c <vApplicationGetIdleTaskMemory+0x2c>)
 8002306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2280      	movs	r2, #128	@ 0x80
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	20000040 	.word	0x20000040
 800231c:	2000009c 	.word	0x2000009c

08002320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a06      	ldr	r2, [pc, #24]	@ (8002348 <vApplicationGetTimerTaskMemory+0x28>)
 8002330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4a05      	ldr	r2, [pc, #20]	@ (800234c <vApplicationGetTimerTaskMemory+0x2c>)
 8002336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2280      	movs	r2, #128	@ 0x80
 800233c:	0052      	lsls	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000029c 	.word	0x2000029c
 800234c:	200002f8 	.word	0x200002f8

08002350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3308      	adds	r3, #8
 800235c:	001a      	movs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	4252      	negs	r2, r2
 8002368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3308      	adds	r3, #8
 800236e:	001a      	movs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3308      	adds	r3, #8
 8002378:	001a      	movs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002384:	46c0      	nop			@ (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}

0800238c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d103      	bne.n	8002404 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e00c      	b.n	800241e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3308      	adds	r3, #8
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	e002      	b.n	8002412 <vListInsert+0x2c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	d2f6      	bcs.n	800240c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b004      	add	sp, #16
 8002450:	bd80      	pop	{r7, pc}

08002452 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6852      	ldr	r2, [r2, #4]
 8002472:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d103      	bne.n	8002486 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <xQueueGenericReset+0x1a>
 80024b6:	b672      	cpsid	i
 80024b8:	46c0      	nop			@ (mov r8, r8)
 80024ba:	e7fd      	b.n	80024b8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80024bc:	f001 fed8 	bl	8004270 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	434b      	muls	r3, r1
 80024ce:	18d2      	adds	r2, r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ea:	1e59      	subs	r1, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	434b      	muls	r3, r1
 80024f2:	18d2      	adds	r2, r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2244      	movs	r2, #68	@ 0x44
 80024fc:	21ff      	movs	r1, #255	@ 0xff
 80024fe:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2245      	movs	r2, #69	@ 0x45
 8002504:	21ff      	movs	r1, #255	@ 0xff
 8002506:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d013      	beq.n	800253e <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3310      	adds	r3, #16
 800251a:	0018      	movs	r0, r3
 800251c:	f001 f88a 	bl	8003634 <xTaskRemoveFromEventList>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d00c      	beq.n	800253e <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002524:	f001 fe94 	bl	8004250 <vPortYield>
 8002528:	e009      	b.n	800253e <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3310      	adds	r3, #16
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff ff0e 	bl	8002350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3324      	adds	r3, #36	@ 0x24
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff ff09 	bl	8002350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800253e:	f001 fea9 	bl	8004294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002542:	2301      	movs	r3, #1
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b004      	add	sp, #16
 800254a:	bd80      	pop	{r7, pc}

0800254c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <xQueueGenericCreateStatic+0x1a>
 8002560:	b672      	cpsid	i
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	e7fd      	b.n	8002562 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <xQueueGenericCreateStatic+0x26>
 800256c:	b672      	cpsid	i
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	e7fd      	b.n	800256e <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <xQueueGenericCreateStatic+0x32>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <xQueueGenericCreateStatic+0x36>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <xQueueGenericCreateStatic+0x38>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <xQueueGenericCreateStatic+0x42>
 8002588:	b672      	cpsid	i
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	e7fd      	b.n	800258a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <xQueueGenericCreateStatic+0x4e>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <xQueueGenericCreateStatic+0x52>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <xQueueGenericCreateStatic+0x54>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <xQueueGenericCreateStatic+0x5e>
 80025a4:	b672      	cpsid	i
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	e7fd      	b.n	80025a6 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025aa:	2350      	movs	r3, #80	@ 0x50
 80025ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b50      	cmp	r3, #80	@ 0x50
 80025b2:	d002      	beq.n	80025ba <xQueueGenericCreateStatic+0x6e>
 80025b4:	b672      	cpsid	i
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	e7fd      	b.n	80025b6 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80025ba:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00e      	beq.n	80025e4 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2246      	movs	r2, #70	@ 0x46
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025ce:	2328      	movs	r3, #40	@ 0x28
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	781c      	ldrb	r4, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	0023      	movs	r3, r4
 80025e0:	f000 f83e 	bl	8002660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025e4:	697b      	ldr	r3, [r7, #20]
	}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b007      	add	sp, #28
 80025ec:	bd90      	pop	{r4, r7, pc}

080025ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025ee:	b590      	push	{r4, r7, lr}
 80025f0:	b08b      	sub	sp, #44	@ 0x2c
 80025f2:	af02      	add	r7, sp, #8
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <xQueueGenericCreate+0x1a>
 8002602:	b672      	cpsid	i
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	e7fd      	b.n	8002604 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	e003      	b.n	800261c <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4353      	muls	r3, r2
 800261a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3350      	adds	r3, #80	@ 0x50
 8002620:	0018      	movs	r0, r3
 8002622:	f001 febd 	bl	80043a0 <pvPortMalloc>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3350      	adds	r3, #80	@ 0x50
 8002638:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2246      	movs	r2, #70	@ 0x46
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781c      	ldrb	r4, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	0023      	movs	r3, r4
 8002652:	f000 f805 	bl	8002660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002656:	69bb      	ldr	r3, [r7, #24]
	}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b009      	add	sp, #36	@ 0x24
 800265e:	bd90      	pop	{r4, r7, pc}

08002660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	001a      	movs	r2, r3
 800266e:	1cfb      	adds	r3, r7, #3
 8002670:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e002      	b.n	8002686 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2101      	movs	r1, #1
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff ff03 	bl	80024a2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1cfa      	adds	r2, r7, #3
 80026a0:	214c      	movs	r1, #76	@ 0x4c
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}

080026ae <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b08a      	sub	sp, #40	@ 0x28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <xQueueGenericSend+0x22>
 80026ca:	b672      	cpsid	i
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	e7fd      	b.n	80026cc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <xQueueGenericSend+0x30>
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <xQueueGenericSend+0x34>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <xQueueGenericSend+0x36>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <xQueueGenericSend+0x40>
 80026e8:	b672      	cpsid	i
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	e7fd      	b.n	80026ea <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d103      	bne.n	80026fc <xQueueGenericSend+0x4e>
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <xQueueGenericSend+0x52>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <xQueueGenericSend+0x54>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <xQueueGenericSend+0x5e>
 8002706:	b672      	cpsid	i
 8002708:	46c0      	nop			@ (mov r8, r8)
 800270a:	e7fd      	b.n	8002708 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800270c:	f001 f92a 	bl	8003964 <xTaskGetSchedulerState>
 8002710:	1e03      	subs	r3, r0, #0
 8002712:	d102      	bne.n	800271a <xQueueGenericSend+0x6c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <xQueueGenericSend+0x70>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <xQueueGenericSend+0x72>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <xQueueGenericSend+0x7c>
 8002724:	b672      	cpsid	i
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	e7fd      	b.n	8002726 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800272a:	f001 fda1 	bl	8004270 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <xQueueGenericSend+0x92>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11e      	bne.n	800277e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fa0a 	bl	8002b60 <prvCopyDataToQueue>
 800274c:	0003      	movs	r3, r0
 800274e:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	3324      	adds	r3, #36	@ 0x24
 800275c:	0018      	movs	r0, r3
 800275e:	f000 ff69 	bl	8003634 <xTaskRemoveFromEventList>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d007      	beq.n	8002776 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002766:	f001 fd73 	bl	8004250 <vPortYield>
 800276a:	e004      	b.n	8002776 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002772:	f001 fd6d 	bl	8004250 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002776:	f001 fd8d 	bl	8004294 <vPortExitCritical>
				return pdPASS;
 800277a:	2301      	movs	r3, #1
 800277c:	e05b      	b.n	8002836 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002784:	f001 fd86 	bl	8004294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002788:	2300      	movs	r3, #0
 800278a:	e054      	b.n	8002836 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002792:	2314      	movs	r3, #20
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	0018      	movs	r0, r3
 8002798:	f000 ffaa 	bl	80036f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027a0:	f001 fd78 	bl	8004294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027a4:	f000 fd56 	bl	8003254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027a8:	f001 fd62 	bl	8004270 <vPortEnterCritical>
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2244      	movs	r2, #68	@ 0x44
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	d103      	bne.n	80027c0 <xQueueGenericSend+0x112>
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	2244      	movs	r2, #68	@ 0x44
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2245      	movs	r2, #69	@ 0x45
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	d103      	bne.n	80027d4 <xQueueGenericSend+0x126>
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2245      	movs	r2, #69	@ 0x45
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]
 80027d4:	f001 fd5e 	bl	8004294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d8:	1d3a      	adds	r2, r7, #4
 80027da:	2314      	movs	r3, #20
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 ff99 	bl	8003718 <xTaskCheckForTimeOut>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d11e      	bne.n	8002828 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fabc 	bl	8002d6a <prvIsQueueFull>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d011      	beq.n	800281a <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	3310      	adds	r3, #16
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	0011      	movs	r1, r2
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fed0 	bl	80035a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fa3b 	bl	8002c82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800280c:	f000 fd2e 	bl	800326c <xTaskResumeAll>
 8002810:	1e03      	subs	r3, r0, #0
 8002812:	d18a      	bne.n	800272a <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8002814:	f001 fd1c 	bl	8004250 <vPortYield>
 8002818:	e787      	b.n	800272a <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fa30 	bl	8002c82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002822:	f000 fd23 	bl	800326c <xTaskResumeAll>
 8002826:	e780      	b.n	800272a <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fa29 	bl	8002c82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002830:	f000 fd1c 	bl	800326c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002834:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b00a      	add	sp, #40	@ 0x28
 800283c:	bd80      	pop	{r7, pc}

0800283e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800283e:	b590      	push	{r4, r7, lr}
 8002840:	b089      	sub	sp, #36	@ 0x24
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <xQueueGenericSendFromISR+0x1e>
 8002856:	b672      	cpsid	i
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	e7fd      	b.n	8002858 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <xQueueGenericSendFromISR+0x2c>
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <xQueueGenericSendFromISR+0x30>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericSendFromISR+0x32>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <xQueueGenericSendFromISR+0x3c>
 8002874:	b672      	cpsid	i
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	e7fd      	b.n	8002876 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d103      	bne.n	8002888 <xQueueGenericSendFromISR+0x4a>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <xQueueGenericSendFromISR+0x4e>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <xQueueGenericSendFromISR+0x50>
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <xQueueGenericSendFromISR+0x5a>
 8002892:	b672      	cpsid	i
 8002894:	46c0      	nop			@ (mov r8, r8)
 8002896:	e7fd      	b.n	8002894 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002898:	f001 fd14 	bl	80042c4 <ulSetInterruptMaskFromISR>
 800289c:	0003      	movs	r3, r0
 800289e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <xQueueGenericSendFromISR+0x74>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d12e      	bne.n	8002910 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028b2:	2413      	movs	r4, #19
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	2145      	movs	r1, #69	@ 0x45
 80028ba:	5c52      	ldrb	r2, [r2, r1]
 80028bc:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f94b 	bl	8002b60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	d111      	bne.n	80028f8 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3324      	adds	r3, #36	@ 0x24
 80028e0:	0018      	movs	r0, r3
 80028e2:	f000 fea7 	bl	8003634 <xTaskRemoveFromEventList>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d00f      	beq.n	800290a <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e008      	b.n	800290a <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028f8:	2313      	movs	r3, #19
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	b259      	sxtb	r1, r3
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2245      	movs	r2, #69	@ 0x45
 8002908:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
		{
 800290e:	e001      	b.n	8002914 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	0018      	movs	r0, r3
 8002918:	f001 fcda 	bl	80042d0 <vClearInterruptMaskFromISR>

	return xReturn;
 800291c:	69fb      	ldr	r3, [r7, #28]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b009      	add	sp, #36	@ 0x24
 8002924:	bd90      	pop	{r4, r7, pc}

08002926 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b08a      	sub	sp, #40	@ 0x28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <xQueueReceive+0x20>
 8002940:	b672      	cpsid	i
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	e7fd      	b.n	8002942 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <xQueueReceive+0x2e>
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <xQueueReceive+0x32>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <xQueueReceive+0x34>
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <xQueueReceive+0x3e>
 800295e:	b672      	cpsid	i
 8002960:	46c0      	nop			@ (mov r8, r8)
 8002962:	e7fd      	b.n	8002960 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002964:	f000 fffe 	bl	8003964 <xTaskGetSchedulerState>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d102      	bne.n	8002972 <xQueueReceive+0x4c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <xQueueReceive+0x50>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <xQueueReceive+0x52>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <xQueueReceive+0x5c>
 800297c:	b672      	cpsid	i
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	e7fd      	b.n	800297e <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002982:	f001 fc75 	bl	8004270 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01a      	beq.n	80029c8 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f94c 	bl	8002c36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	3310      	adds	r3, #16
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 fe3e 	bl	8003634 <xTaskRemoveFromEventList>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029bc:	f001 fc48 	bl	8004250 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029c0:	f001 fc68 	bl	8004294 <vPortExitCritical>
				return pdPASS;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e062      	b.n	8002a8e <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029ce:	f001 fc61 	bl	8004294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e05b      	b.n	8002a8e <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029dc:	2314      	movs	r3, #20
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fe85 	bl	80036f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029ea:	f001 fc53 	bl	8004294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029ee:	f000 fc31 	bl	8003254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029f2:	f001 fc3d 	bl	8004270 <vPortEnterCritical>
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2244      	movs	r2, #68	@ 0x44
 80029fa:	5c9b      	ldrb	r3, [r3, r2]
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	d103      	bne.n	8002a0a <xQueueReceive+0xe4>
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	2244      	movs	r2, #68	@ 0x44
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2245      	movs	r2, #69	@ 0x45
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	d103      	bne.n	8002a1e <xQueueReceive+0xf8>
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	2245      	movs	r2, #69	@ 0x45
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	5499      	strb	r1, [r3, r2]
 8002a1e:	f001 fc39 	bl	8004294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a22:	1d3a      	adds	r2, r7, #4
 8002a24:	2314      	movs	r3, #20
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	0011      	movs	r1, r2
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 fe74 	bl	8003718 <xTaskCheckForTimeOut>
 8002a30:	1e03      	subs	r3, r0, #0
 8002a32:	d11e      	bne.n	8002a72 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f981 	bl	8002d3e <prvIsQueueEmpty>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d011      	beq.n	8002a64 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	3324      	adds	r3, #36	@ 0x24
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fdab 	bl	80035a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f916 	bl	8002c82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a56:	f000 fc09 	bl	800326c <xTaskResumeAll>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d191      	bne.n	8002982 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8002a5e:	f001 fbf7 	bl	8004250 <vPortYield>
 8002a62:	e78e      	b.n	8002982 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f90b 	bl	8002c82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a6c:	f000 fbfe 	bl	800326c <xTaskResumeAll>
 8002a70:	e787      	b.n	8002982 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f904 	bl	8002c82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a7a:	f000 fbf7 	bl	800326c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f95c 	bl	8002d3e <prvIsQueueEmpty>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d100      	bne.n	8002a8c <xQueueReceive+0x166>
 8002a8a:	e77a      	b.n	8002982 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b00a      	add	sp, #40	@ 0x28
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a96:	b590      	push	{r4, r7, lr}
 8002a98:	b08b      	sub	sp, #44	@ 0x2c
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <xQueueReceiveFromISR+0x1c>
 8002aac:	b672      	cpsid	i
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	e7fd      	b.n	8002aae <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <xQueueReceiveFromISR+0x2a>
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <xQueueReceiveFromISR+0x2e>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <xQueueReceiveFromISR+0x30>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <xQueueReceiveFromISR+0x3a>
 8002aca:	b672      	cpsid	i
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	e7fd      	b.n	8002acc <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ad0:	f001 fbf8 	bl	80042c4 <ulSetInterruptMaskFromISR>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d032      	beq.n	8002b4a <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ae4:	2417      	movs	r4, #23
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	6a3a      	ldr	r2, [r7, #32]
 8002aea:	2144      	movs	r1, #68	@ 0x44
 8002aec:	5c52      	ldrb	r2, [r2, r1]
 8002aee:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	0011      	movs	r1, r2
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 f89d 	bl	8002c36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	d111      	bne.n	8002b32 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	3310      	adds	r3, #16
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fd8a 	bl	8003634 <xTaskRemoveFromEventList>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d00f      	beq.n	8002b44 <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e008      	b.n	8002b44 <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b32:	2317      	movs	r3, #23
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	b259      	sxtb	r1, r3
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	2244      	movs	r2, #68	@ 0x44
 8002b42:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002b44:	2301      	movs	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b48:	e001      	b.n	8002b4e <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f001 fbbd 	bl	80042d0 <vClearInterruptMaskFromISR>

	return xReturn;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b00b      	add	sp, #44	@ 0x2c
 8002b5e:	bd90      	pop	{r4, r7, pc}

08002b60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d14e      	bne.n	8002c24 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 ff06 	bl	800399c <xTaskPriorityDisinherit>
 8002b90:	0003      	movs	r3, r0
 8002b92:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	e043      	b.n	8002c24 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6858      	ldr	r0, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	0019      	movs	r1, r3
 8002bae:	f001 fdcd 	bl	800474c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	18d2      	adds	r2, r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d32b      	bcc.n	8002c24 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	e026      	b.n	8002c24 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	68d8      	ldr	r0, [r3, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0019      	movs	r1, r3
 8002be2:	f001 fdb3 	bl	800474c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	425b      	negs	r3, r3
 8002bf0:	18d2      	adds	r2, r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d207      	bcs.n	8002c12 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	425b      	negs	r3, r3
 8002c0c:	18d2      	adds	r2, r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d105      	bne.n	8002c24 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002c2c:	697b      	ldr	r3, [r7, #20]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b006      	add	sp, #24
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d018      	beq.n	8002c7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d303      	bcc.n	8002c6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68d9      	ldr	r1, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fd69 	bl	800474c <memcpy>
	}
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c8a:	f001 faf1 	bl	8004270 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c8e:	230f      	movs	r3, #15
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	2145      	movs	r1, #69	@ 0x45
 8002c96:	5c52      	ldrb	r2, [r2, r1]
 8002c98:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c9a:	e013      	b.n	8002cc4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3324      	adds	r3, #36	@ 0x24
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f000 fcc3 	bl	8003634 <xTaskRemoveFromEventList>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d001      	beq.n	8002cb6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cb2:	f000 fd83 	bl	80037bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	dce5      	bgt.n	8002c9c <prvUnlockQueue+0x1a>
 8002cd0:	e000      	b.n	8002cd4 <prvUnlockQueue+0x52>
					break;
 8002cd2:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2245      	movs	r2, #69	@ 0x45
 8002cd8:	21ff      	movs	r1, #255	@ 0xff
 8002cda:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002cdc:	f001 fada 	bl	8004294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ce0:	f001 fac6 	bl	8004270 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ce4:	230e      	movs	r3, #14
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	2144      	movs	r1, #68	@ 0x44
 8002cec:	5c52      	ldrb	r2, [r2, r1]
 8002cee:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cf0:	e013      	b.n	8002d1a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fc98 	bl	8003634 <xTaskRemoveFromEventList>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002d08:	f000 fd58 	bl	80037bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d0c:	210e      	movs	r1, #14
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d1a:	230e      	movs	r3, #14
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dce5      	bgt.n	8002cf2 <prvUnlockQueue+0x70>
 8002d26:	e000      	b.n	8002d2a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002d28:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2244      	movs	r2, #68	@ 0x44
 8002d2e:	21ff      	movs	r1, #255	@ 0xff
 8002d30:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002d32:	f001 faaf 	bl	8004294 <vPortExitCritical>
}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d46:	f001 fa93 	bl	8004270 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e001      	b.n	8002d5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d5c:	f001 fa9a 	bl	8004294 <vPortExitCritical>

	return xReturn;
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d72:	f001 fa7d 	bl	8004270 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d102      	bne.n	8002d88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d82:	2301      	movs	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e001      	b.n	8002d8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d8c:	f001 fa82 	bl	8004294 <vPortExitCritical>

	return xReturn;
 8002d90:	68fb      	ldr	r3, [r7, #12]
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e015      	b.n	8002dd8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dac:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <vQueueAddToRegistry+0x4c>)
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	00d2      	lsls	r2, r2, #3
 8002db2:	58d3      	ldr	r3, [r2, r3]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10c      	bne.n	8002dd2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <vQueueAddToRegistry+0x4c>)
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	00d2      	lsls	r2, r2, #3
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002dc2:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <vQueueAddToRegistry+0x4c>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	3304      	adds	r3, #4
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002dd0:	e006      	b.n	8002de0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b07      	cmp	r3, #7
 8002ddc:	d9e6      	bls.n	8002dac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	46c0      	nop			@ (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200006f8 	.word	0x200006f8

08002dec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002dfc:	f001 fa38 	bl	8004270 <vPortEnterCritical>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2244      	movs	r2, #68	@ 0x44
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	d103      	bne.n	8002e14 <vQueueWaitForMessageRestricted+0x28>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2244      	movs	r2, #68	@ 0x44
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2245      	movs	r2, #69	@ 0x45
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	d103      	bne.n	8002e28 <vQueueWaitForMessageRestricted+0x3c>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2245      	movs	r2, #69	@ 0x45
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]
 8002e28:	f001 fa34 	bl	8004294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3324      	adds	r3, #36	@ 0x24
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fbd1 	bl	80035e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff ff1c 	bl	8002c82 <prvUnlockQueue>
	}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b006      	add	sp, #24
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e52:	b590      	push	{r4, r7, lr}
 8002e54:	b08d      	sub	sp, #52	@ 0x34
 8002e56:	af04      	add	r7, sp, #16
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <xTaskCreateStatic+0x1a>
 8002e66:	b672      	cpsid	i
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	e7fd      	b.n	8002e68 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <xTaskCreateStatic+0x26>
 8002e72:	b672      	cpsid	i
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	e7fd      	b.n	8002e74 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e78:	235c      	movs	r3, #92	@ 0x5c
 8002e7a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b5c      	cmp	r3, #92	@ 0x5c
 8002e80:	d002      	beq.n	8002e88 <xTaskCreateStatic+0x36>
 8002e82:	b672      	cpsid	i
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	e7fd      	b.n	8002e84 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e88:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <xTaskCreateStatic+0x80>
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01d      	beq.n	8002ed2 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2259      	movs	r2, #89	@ 0x59
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ea8:	683c      	ldr	r4, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9303      	str	r3, [sp, #12]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	2318      	movs	r3, #24
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	0023      	movs	r3, r4
 8002ec4:	f000 f858 	bl	8002f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 f8de 	bl	800308c <prvAddNewTaskToReadyList>
 8002ed0:	e001      	b.n	8002ed6 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b009      	add	sp, #36	@ 0x24
 8002ede:	bd90      	pop	{r4, r7, pc}

08002ee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b08d      	sub	sp, #52	@ 0x34
 8002ee4:	af04      	add	r7, sp, #16
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	1dbb      	adds	r3, r7, #6
 8002eee:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ef0:	1dbb      	adds	r3, r7, #6
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 fa52 	bl	80043a0 <pvPortMalloc>
 8002efc:	0003      	movs	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f06:	205c      	movs	r0, #92	@ 0x5c
 8002f08:	f001 fa4a 	bl	80043a0 <pvPortMalloc>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1c:	e006      	b.n	8002f2c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 fae5 	bl	80044f0 <vPortFree>
 8002f26:	e001      	b.n	8002f2c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01a      	beq.n	8002f68 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2259      	movs	r2, #89	@ 0x59
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	683c      	ldr	r4, [r7, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9303      	str	r3, [sp, #12]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	0023      	movs	r3, r4
 8002f56:	f000 f80f 	bl	8002f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 f895 	bl	800308c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e002      	b.n	8002f6e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	425b      	negs	r3, r3
 8002f6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b009      	add	sp, #36	@ 0x24
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	001a      	movs	r2, r3
 8002f90:	21a5      	movs	r1, #165	@ 0xa5
 8002f92:	f001 fbaf 	bl	80046f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	493a      	ldr	r1, [pc, #232]	@ (8003088 <prvInitialiseNewTask+0x110>)
 8002f9e:	468c      	mov	ip, r1
 8002fa0:	4463      	add	r3, ip
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2207      	movs	r2, #7
 8002fac:	4393      	bics	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d002      	beq.n	8002fbe <prvInitialiseNewTask+0x46>
 8002fb8:	b672      	cpsid	i
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	e7fd      	b.n	8002fba <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e013      	b.n	8002ff2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	18d3      	adds	r3, r2, r3
 8002fd0:	7818      	ldrb	r0, [r3, #0]
 8002fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fd4:	2134      	movs	r1, #52	@ 0x34
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	18d3      	adds	r3, r2, r3
 8002fda:	185b      	adds	r3, r3, r1
 8002fdc:	1c02      	adds	r2, r0, #0
 8002fde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	18d3      	adds	r3, r2, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d9e8      	bls.n	8002fca <prvInitialiseNewTask+0x52>
 8002ff8:	e000      	b.n	8002ffc <prvInitialiseNewTask+0x84>
			{
				break;
 8002ffa:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	2243      	movs	r2, #67	@ 0x43
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]
 8003004:	e003      	b.n	800300e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	2234      	movs	r2, #52	@ 0x34
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2b37      	cmp	r3, #55	@ 0x37
 8003012:	d901      	bls.n	8003018 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003014:	2337      	movs	r3, #55	@ 0x37
 8003016:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	2200      	movs	r2, #0
 8003028:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800302a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302c:	3304      	adds	r3, #4
 800302e:	0018      	movs	r0, r3
 8003030:	f7ff f9ac 	bl	800238c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003036:	3318      	adds	r3, #24
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff f9a7 	bl	800238c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003042:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2238      	movs	r2, #56	@ 0x38
 8003048:	1ad2      	subs	r2, r2, r3
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800305a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305c:	2258      	movs	r2, #88	@ 0x58
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	0018      	movs	r0, r3
 800306a:	f001 f867 	bl	800413c <pxPortInitialiseStack>
 800306e:	0002      	movs	r2, r0
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b006      	add	sp, #24
 8003086:	bd80      	pop	{r7, pc}
 8003088:	3fffffff 	.word	0x3fffffff

0800308c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003094:	f001 f8ec 	bl	8004270 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003098:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <prvAddNewTaskToReadyList+0xb8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <prvAddNewTaskToReadyList+0xb8>)
 80030a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030aa:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <prvAddNewTaskToReadyList+0xb8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d110      	bne.n	80030da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030b8:	f000 fb9a 	bl	80037f0 <prvInitialiseTaskLists>
 80030bc:	e00d      	b.n	80030da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030be:	4b23      	ldr	r3, [pc, #140]	@ (800314c <prvAddNewTaskToReadyList+0xc0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d802      	bhi.n	80030da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <prvAddNewTaskToReadyList+0xc4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <prvAddNewTaskToReadyList+0xc4>)
 80030e2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <prvAddNewTaskToReadyList+0xc4>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f0:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <prvAddNewTaskToReadyList+0xc8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d903      	bls.n	8003100 <prvAddNewTaskToReadyList+0x74>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fc:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <prvAddNewTaskToReadyList+0xc8>)
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003104:	0013      	movs	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	189b      	adds	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <prvAddNewTaskToReadyList+0xcc>)
 800310e:	189a      	adds	r2, r3, r2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	0019      	movs	r1, r3
 8003116:	0010      	movs	r0, r2
 8003118:	f7ff f943 	bl	80023a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800311c:	f001 f8ba 	bl	8004294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003120:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <prvAddNewTaskToReadyList+0xc0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <prvAddNewTaskToReadyList+0xbc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	429a      	cmp	r2, r3
 8003134:	d201      	bcs.n	800313a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003136:	f001 f88b 	bl	8004250 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	20000c0c 	.word	0x20000c0c
 8003148:	20000738 	.word	0x20000738
 800314c:	20000c18 	.word	0x20000c18
 8003150:	20000c28 	.word	0x20000c28
 8003154:	20000c14 	.word	0x20000c14
 8003158:	2000073c 	.word	0x2000073c

0800315c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <vTaskDelay+0x48>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <vTaskDelay+0x20>
 8003176:	b672      	cpsid	i
 8003178:	46c0      	nop			@ (mov r8, r8)
 800317a:	e7fd      	b.n	8003178 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800317c:	f000 f86a 	bl	8003254 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2100      	movs	r1, #0
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fc67 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800318a:	f000 f86f 	bl	800326c <xTaskResumeAll>
 800318e:	0003      	movs	r3, r0
 8003190:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8003198:	f001 f85a 	bl	8004250 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000c34 	.word	0x20000c34

080031a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b089      	sub	sp, #36	@ 0x24
 80031ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031b6:	003a      	movs	r2, r7
 80031b8:	1d39      	adds	r1, r7, #4
 80031ba:	2308      	movs	r3, #8
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff f896 	bl	80022f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031c4:	683c      	ldr	r4, [r7, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	491c      	ldr	r1, [pc, #112]	@ (800323c <vTaskStartScheduler+0x94>)
 80031cc:	481c      	ldr	r0, [pc, #112]	@ (8003240 <vTaskStartScheduler+0x98>)
 80031ce:	9202      	str	r2, [sp, #8]
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2300      	movs	r3, #0
 80031d8:	0022      	movs	r2, r4
 80031da:	f7ff fe3a 	bl	8002e52 <xTaskCreateStatic>
 80031de:	0002      	movs	r2, r0
 80031e0:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <vTaskStartScheduler+0x9c>)
 80031e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031e4:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <vTaskStartScheduler+0x9c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e001      	b.n	80031f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d103      	bne.n	8003204 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80031fc:	f000 fc80 	bl	8003b00 <xTimerCreateTimerTask>
 8003200:	0003      	movs	r3, r0
 8003202:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10d      	bne.n	8003226 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800320a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800320c:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <vTaskStartScheduler+0xa0>)
 800320e:	2201      	movs	r2, #1
 8003210:	4252      	negs	r2, r2
 8003212:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003214:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <vTaskStartScheduler+0xa4>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <vTaskStartScheduler+0xa8>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003220:	f000 fff2 	bl	8004208 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003224:	e005      	b.n	8003232 <vTaskStartScheduler+0x8a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	d102      	bne.n	8003232 <vTaskStartScheduler+0x8a>
 800322c:	b672      	cpsid	i
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	e7fd      	b.n	800322e <vTaskStartScheduler+0x86>
}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b005      	add	sp, #20
 8003238:	bd90      	pop	{r4, r7, pc}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	08004798 	.word	0x08004798
 8003240:	080037d1 	.word	0x080037d1
 8003244:	20000c30 	.word	0x20000c30
 8003248:	20000c2c 	.word	0x20000c2c
 800324c:	20000c18 	.word	0x20000c18
 8003250:	20000c10 	.word	0x20000c10

08003254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003258:	4b03      	ldr	r3, [pc, #12]	@ (8003268 <vTaskSuspendAll+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	4b02      	ldr	r3, [pc, #8]	@ (8003268 <vTaskSuspendAll+0x14>)
 8003260:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000c34 	.word	0x20000c34

0800326c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800327a:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <xTaskResumeAll+0xf8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <xTaskResumeAll+0x1c>
 8003282:	b672      	cpsid	i
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	e7fd      	b.n	8003284 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003288:	f000 fff2 	bl	8004270 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800328c:	4b35      	ldr	r3, [pc, #212]	@ (8003364 <xTaskResumeAll+0xf8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	4b34      	ldr	r3, [pc, #208]	@ (8003364 <xTaskResumeAll+0xf8>)
 8003294:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003296:	4b33      	ldr	r3, [pc, #204]	@ (8003364 <xTaskResumeAll+0xf8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d15b      	bne.n	8003356 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800329e:	4b32      	ldr	r3, [pc, #200]	@ (8003368 <xTaskResumeAll+0xfc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d057      	beq.n	8003356 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032a6:	e02f      	b.n	8003308 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a8:	4b30      	ldr	r3, [pc, #192]	@ (800336c <xTaskResumeAll+0x100>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3318      	adds	r3, #24
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff f8cc 	bl	8002452 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3304      	adds	r3, #4
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff f8c7 	bl	8002452 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c8:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <xTaskResumeAll+0x104>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d903      	bls.n	80032d8 <xTaskResumeAll+0x6c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d4:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <xTaskResumeAll+0x104>)
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032dc:	0013      	movs	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <xTaskResumeAll+0x108>)
 80032e6:	189a      	adds	r2, r3, r2
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3304      	adds	r3, #4
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f7ff f857 	bl	80023a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <xTaskResumeAll+0x10c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <xTaskResumeAll+0x110>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <xTaskResumeAll+0x100>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1cb      	bne.n	80032a8 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003316:	f000 fb07 	bl	8003928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800331a:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <xTaskResumeAll+0x114>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00f      	beq.n	8003346 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003326:	f000 f83b 	bl	80033a0 <xTaskIncrementTick>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d002      	beq.n	8003334 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800332e:	4b13      	ldr	r3, [pc, #76]	@ (800337c <xTaskResumeAll+0x110>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f2      	bne.n	8003326 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8003340:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <xTaskResumeAll+0x114>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <xTaskResumeAll+0x110>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003352:	f000 ff7d 	bl	8004250 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003356:	f000 ff9d 	bl	8004294 <vPortExitCritical>

	return xAlreadyYielded;
 800335a:	68bb      	ldr	r3, [r7, #8]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b004      	add	sp, #16
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000c34 	.word	0x20000c34
 8003368:	20000c0c 	.word	0x20000c0c
 800336c:	20000bcc 	.word	0x20000bcc
 8003370:	20000c14 	.word	0x20000c14
 8003374:	2000073c 	.word	0x2000073c
 8003378:	20000738 	.word	0x20000738
 800337c:	20000c20 	.word	0x20000c20
 8003380:	20000c1c 	.word	0x20000c1c

08003384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800338a:	4b04      	ldr	r3, [pc, #16]	@ (800339c <xTaskGetTickCount+0x18>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003390:	687b      	ldr	r3, [r7, #4]
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	20000c10 	.word	0x20000c10

080033a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033aa:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <xTaskIncrementTick+0x134>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d000      	beq.n	80033b4 <xTaskIncrementTick+0x14>
 80033b2:	e07f      	b.n	80034b4 <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033b4:	4b48      	ldr	r3, [pc, #288]	@ (80034d8 <xTaskIncrementTick+0x138>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033bc:	4b46      	ldr	r3, [pc, #280]	@ (80034d8 <xTaskIncrementTick+0x138>)
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d118      	bne.n	80033fa <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033c8:	4b44      	ldr	r3, [pc, #272]	@ (80034dc <xTaskIncrementTick+0x13c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <xTaskIncrementTick+0x38>
 80033d2:	b672      	cpsid	i
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	e7fd      	b.n	80033d4 <xTaskIncrementTick+0x34>
 80033d8:	4b40      	ldr	r3, [pc, #256]	@ (80034dc <xTaskIncrementTick+0x13c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b40      	ldr	r3, [pc, #256]	@ (80034e0 <xTaskIncrementTick+0x140>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b3e      	ldr	r3, [pc, #248]	@ (80034dc <xTaskIncrementTick+0x13c>)
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <xTaskIncrementTick+0x140>)
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <xTaskIncrementTick+0x144>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	4b3c      	ldr	r3, [pc, #240]	@ (80034e4 <xTaskIncrementTick+0x144>)
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f000 fa97 	bl	8003928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033fa:	4b3b      	ldr	r3, [pc, #236]	@ (80034e8 <xTaskIncrementTick+0x148>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	429a      	cmp	r2, r3
 8003402:	d349      	bcc.n	8003498 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003404:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <xTaskIncrementTick+0x13c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800340e:	4b36      	ldr	r3, [pc, #216]	@ (80034e8 <xTaskIncrementTick+0x148>)
 8003410:	2201      	movs	r2, #1
 8003412:	4252      	negs	r2, r2
 8003414:	601a      	str	r2, [r3, #0]
					break;
 8003416:	e03f      	b.n	8003498 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003418:	4b30      	ldr	r3, [pc, #192]	@ (80034dc <xTaskIncrementTick+0x13c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d203      	bcs.n	8003438 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <xTaskIncrementTick+0x148>)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003436:	e02f      	b.n	8003498 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3304      	adds	r3, #4
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff f808 	bl	8002452 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3318      	adds	r3, #24
 800344e:	0018      	movs	r0, r3
 8003450:	f7fe ffff 	bl	8002452 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <xTaskIncrementTick+0x14c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d903      	bls.n	8003468 <xTaskIncrementTick+0xc8>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003464:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <xTaskIncrementTick+0x14c>)
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800346c:	0013      	movs	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	189b      	adds	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <xTaskIncrementTick+0x150>)
 8003476:	189a      	adds	r2, r3, r2
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3304      	adds	r3, #4
 800347c:	0019      	movs	r1, r3
 800347e:	0010      	movs	r0, r2
 8003480:	f7fe ff8f 	bl	80023a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003488:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <xTaskIncrementTick+0x154>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	429a      	cmp	r2, r3
 8003490:	d3b8      	bcc.n	8003404 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003496:	e7b5      	b.n	8003404 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003498:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <xTaskIncrementTick+0x154>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	4914      	ldr	r1, [pc, #80]	@ (80034f0 <xTaskIncrementTick+0x150>)
 80034a0:	0013      	movs	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	189b      	adds	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	585b      	ldr	r3, [r3, r1]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d907      	bls.n	80034be <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e004      	b.n	80034be <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80034b4:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <xTaskIncrementTick+0x158>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <xTaskIncrementTick+0x158>)
 80034bc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80034be:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <xTaskIncrementTick+0x15c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 80034c6:	2301      	movs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80034ca:	697b      	ldr	r3, [r7, #20]
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b006      	add	sp, #24
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000c34 	.word	0x20000c34
 80034d8:	20000c10 	.word	0x20000c10
 80034dc:	20000bc4 	.word	0x20000bc4
 80034e0:	20000bc8 	.word	0x20000bc8
 80034e4:	20000c24 	.word	0x20000c24
 80034e8:	20000c2c 	.word	0x20000c2c
 80034ec:	20000c14 	.word	0x20000c14
 80034f0:	2000073c 	.word	0x2000073c
 80034f4:	20000738 	.word	0x20000738
 80034f8:	20000c1c 	.word	0x20000c1c
 80034fc:	20000c20 	.word	0x20000c20

08003500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003506:	4b22      	ldr	r3, [pc, #136]	@ (8003590 <vTaskSwitchContext+0x90>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800350e:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <vTaskSwitchContext+0x94>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003514:	e038      	b.n	8003588 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8003516:	4b1f      	ldr	r3, [pc, #124]	@ (8003594 <vTaskSwitchContext+0x94>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800351c:	4b1e      	ldr	r3, [pc, #120]	@ (8003598 <vTaskSwitchContext+0x98>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	e008      	b.n	8003536 <vTaskSwitchContext+0x36>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <vTaskSwitchContext+0x30>
 800352a:	b672      	cpsid	i
 800352c:	46c0      	nop			@ (mov r8, r8)
 800352e:	e7fd      	b.n	800352c <vTaskSwitchContext+0x2c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4919      	ldr	r1, [pc, #100]	@ (800359c <vTaskSwitchContext+0x9c>)
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	0013      	movs	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	189b      	adds	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	585b      	ldr	r3, [r3, r1]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ed      	beq.n	8003524 <vTaskSwitchContext+0x24>
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	0013      	movs	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	189b      	adds	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a12      	ldr	r2, [pc, #72]	@ (800359c <vTaskSwitchContext+0x9c>)
 8003554:	189b      	adds	r3, r3, r2
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	3308      	adds	r3, #8
 800356a:	429a      	cmp	r2, r3
 800356c:	d104      	bne.n	8003578 <vTaskSwitchContext+0x78>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <vTaskSwitchContext+0xa0>)
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <vTaskSwitchContext+0x98>)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	601a      	str	r2, [r3, #0]
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000c34 	.word	0x20000c34
 8003594:	20000c20 	.word	0x20000c20
 8003598:	20000c14 	.word	0x20000c14
 800359c:	2000073c 	.word	0x2000073c
 80035a0:	20000738 	.word	0x20000738

080035a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <vTaskPlaceOnEventList+0x16>
 80035b4:	b672      	cpsid	i
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	e7fd      	b.n	80035b6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ba:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <vTaskPlaceOnEventList+0x3c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3318      	adds	r3, #24
 80035c0:	001a      	movs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0011      	movs	r1, r2
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7fe ff0d 	bl	80023e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fa41 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000738 	.word	0x20000738

080035e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <vTaskPlaceOnEventListRestricted+0x18>
 80035f6:	b672      	cpsid	i
 80035f8:	46c0      	nop			@ (mov r8, r8)
 80035fa:	e7fd      	b.n	80035f8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <vTaskPlaceOnEventListRestricted+0x4c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3318      	adds	r3, #24
 8003602:	001a      	movs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f7fe feca 	bl	80023a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8003614:	2301      	movs	r3, #1
 8003616:	425b      	negs	r3, r3
 8003618:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f000 fa19 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
	}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	20000738 	.word	0x20000738

08003634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <xTaskRemoveFromEventList+0x1c>
 800364a:	b672      	cpsid	i
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	e7fd      	b.n	800364c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3318      	adds	r3, #24
 8003654:	0018      	movs	r0, r3
 8003656:	f7fe fefc 	bl	8002452 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365a:	4b1f      	ldr	r3, [pc, #124]	@ (80036d8 <xTaskRemoveFromEventList+0xa4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11d      	bne.n	800369e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3304      	adds	r3, #4
 8003666:	0018      	movs	r0, r3
 8003668:	f7fe fef3 	bl	8002452 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	4b1a      	ldr	r3, [pc, #104]	@ (80036dc <xTaskRemoveFromEventList+0xa8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d903      	bls.n	8003680 <xTaskRemoveFromEventList+0x4c>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367c:	4b17      	ldr	r3, [pc, #92]	@ (80036dc <xTaskRemoveFromEventList+0xa8>)
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003684:	0013      	movs	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	189b      	adds	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <xTaskRemoveFromEventList+0xac>)
 800368e:	189a      	adds	r2, r3, r2
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3304      	adds	r3, #4
 8003694:	0019      	movs	r1, r3
 8003696:	0010      	movs	r0, r2
 8003698:	f7fe fe83 	bl	80023a2 <vListInsertEnd>
 800369c:	e007      	b.n	80036ae <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3318      	adds	r3, #24
 80036a2:	001a      	movs	r2, r3
 80036a4:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <xTaskRemoveFromEventList+0xb0>)
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fe fe7a 	bl	80023a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b2:	4b0d      	ldr	r3, [pc, #52]	@ (80036e8 <xTaskRemoveFromEventList+0xb4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d905      	bls.n	80036c8 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <xTaskRemoveFromEventList+0xb8>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e001      	b.n	80036cc <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80036cc:	68fb      	ldr	r3, [r7, #12]
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b004      	add	sp, #16
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	20000c34 	.word	0x20000c34
 80036dc:	20000c14 	.word	0x20000c14
 80036e0:	2000073c 	.word	0x2000073c
 80036e4:	20000bcc 	.word	0x20000bcc
 80036e8:	20000738 	.word	0x20000738
 80036ec:	20000c20 	.word	0x20000c20

080036f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <vTaskInternalSetTimeOutState+0x20>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003700:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <vTaskInternalSetTimeOutState+0x24>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000c24 	.word	0x20000c24
 8003714:	20000c10 	.word	0x20000c10

08003718 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <xTaskCheckForTimeOut+0x16>
 8003728:	b672      	cpsid	i
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	e7fd      	b.n	800372a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <xTaskCheckForTimeOut+0x22>
 8003734:	b672      	cpsid	i
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	e7fd      	b.n	8003736 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 800373a:	f000 fd99 	bl	8004270 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800373e:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <xTaskCheckForTimeOut+0x9c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	d102      	bne.n	800375c <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e024      	b.n	80037a6 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <xTaskCheckForTimeOut+0xa0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d007      	beq.n	8003778 <xTaskCheckForTimeOut+0x60>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003772:	2301      	movs	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e016      	b.n	80037a6 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	d20c      	bcs.n	800379c <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad2      	subs	r2, r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f7ff ffad 	bl	80036f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e004      	b.n	80037a6 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037a2:	2301      	movs	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80037a6:	f000 fd75 	bl	8004294 <vPortExitCritical>

	return xReturn;
 80037aa:	697b      	ldr	r3, [r7, #20]
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b006      	add	sp, #24
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000c10 	.word	0x20000c10
 80037b8:	20000c24 	.word	0x20000c24

080037bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037c0:	4b02      	ldr	r3, [pc, #8]	@ (80037cc <vTaskMissedYield+0x10>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000c20 	.word	0x20000c20

080037d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037d8:	f000 f84e 	bl	8003878 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037dc:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <prvIdleTask+0x1c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d9f9      	bls.n	80037d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037e4:	f000 fd34 	bl	8004250 <vPortYield>
		prvCheckTasksWaitingTermination();
 80037e8:	e7f6      	b.n	80037d8 <prvIdleTask+0x8>
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	2000073c 	.word	0x2000073c

080037f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	e00c      	b.n	8003816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	0013      	movs	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	189b      	adds	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <prvInitialiseTaskLists+0x68>)
 8003808:	189b      	adds	r3, r3, r2
 800380a:	0018      	movs	r0, r3
 800380c:	f7fe fda0 	bl	8002350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3301      	adds	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b37      	cmp	r3, #55	@ 0x37
 800381a:	d9ef      	bls.n	80037fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <prvInitialiseTaskLists+0x6c>)
 800381e:	0018      	movs	r0, r3
 8003820:	f7fe fd96 	bl	8002350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003824:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <prvInitialiseTaskLists+0x70>)
 8003826:	0018      	movs	r0, r3
 8003828:	f7fe fd92 	bl	8002350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800382c:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <prvInitialiseTaskLists+0x74>)
 800382e:	0018      	movs	r0, r3
 8003830:	f7fe fd8e 	bl	8002350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003834:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <prvInitialiseTaskLists+0x78>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fe fd8a 	bl	8002350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <prvInitialiseTaskLists+0x7c>)
 800383e:	0018      	movs	r0, r3
 8003840:	f7fe fd86 	bl	8002350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <prvInitialiseTaskLists+0x80>)
 8003846:	4a05      	ldr	r2, [pc, #20]	@ (800385c <prvInitialiseTaskLists+0x6c>)
 8003848:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <prvInitialiseTaskLists+0x84>)
 800384c:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <prvInitialiseTaskLists+0x70>)
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}
 8003858:	2000073c 	.word	0x2000073c
 800385c:	20000b9c 	.word	0x20000b9c
 8003860:	20000bb0 	.word	0x20000bb0
 8003864:	20000bcc 	.word	0x20000bcc
 8003868:	20000be0 	.word	0x20000be0
 800386c:	20000bf8 	.word	0x20000bf8
 8003870:	20000bc4 	.word	0x20000bc4
 8003874:	20000bc8 	.word	0x20000bc8

08003878 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387e:	e01a      	b.n	80038b6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003880:	f000 fcf6 	bl	8004270 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003884:	4b10      	ldr	r3, [pc, #64]	@ (80038c8 <prvCheckTasksWaitingTermination+0x50>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	0018      	movs	r0, r3
 8003892:	f7fe fdde 	bl	8002452 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <prvCheckTasksWaitingTermination+0x54>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1e5a      	subs	r2, r3, #1
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <prvCheckTasksWaitingTermination+0x54>)
 800389e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <prvCheckTasksWaitingTermination+0x58>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <prvCheckTasksWaitingTermination+0x58>)
 80038a8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80038aa:	f000 fcf3 	bl	8004294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 f80f 	bl	80038d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <prvCheckTasksWaitingTermination+0x58>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e0      	bne.n	8003880 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000be0 	.word	0x20000be0
 80038cc:	20000c0c 	.word	0x20000c0c
 80038d0:	20000bf4 	.word	0x20000bf4

080038d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2259      	movs	r2, #89	@ 0x59
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fe00 	bl	80044f0 <vPortFree>
				vPortFree( pxTCB );
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 fdfc 	bl	80044f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038f8:	e011      	b.n	800391e <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2259      	movs	r2, #89	@ 0x59
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d104      	bne.n	800390e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fdf2 	bl	80044f0 <vPortFree>
	}
 800390c:	e007      	b.n	800391e <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2259      	movs	r2, #89	@ 0x59
 8003912:	5c9b      	ldrb	r3, [r3, r2]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d002      	beq.n	800391e <prvDeleteTCB+0x4a>
 8003918:	b672      	cpsid	i
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	e7fd      	b.n	800391a <prvDeleteTCB+0x46>
	}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <prvResetNextTaskUnblockTime+0x34>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <prvResetNextTaskUnblockTime+0x38>)
 800393a:	2201      	movs	r2, #1
 800393c:	4252      	negs	r2, r2
 800393e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003940:	e008      	b.n	8003954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <prvResetNextTaskUnblockTime+0x34>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <prvResetNextTaskUnblockTime+0x38>)
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000bc4 	.word	0x20000bc4
 8003960:	20000c2c 	.word	0x20000c2c

08003964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <xTaskGetSchedulerState+0x30>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003972:	2301      	movs	r3, #1
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	e008      	b.n	800398a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003978:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <xTaskGetSchedulerState+0x34>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003980:	2302      	movs	r3, #2
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	e001      	b.n	800398a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800398a:	687b      	ldr	r3, [r7, #4]
	}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000c18 	.word	0x20000c18
 8003998:	20000c34 	.word	0x20000c34

0800399c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d046      	beq.n	8003a40 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039b2:	4b26      	ldr	r3, [pc, #152]	@ (8003a4c <xTaskPriorityDisinherit+0xb0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d002      	beq.n	80039c2 <xTaskPriorityDisinherit+0x26>
 80039bc:	b672      	cpsid	i
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	e7fd      	b.n	80039be <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <xTaskPriorityDisinherit+0x34>
 80039ca:	b672      	cpsid	i
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	e7fd      	b.n	80039cc <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d02c      	beq.n	8003a40 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d128      	bne.n	8003a40 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3304      	adds	r3, #4
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7fe fd2d 	bl	8002452 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	2238      	movs	r2, #56	@ 0x38
 8003a06:	1ad2      	subs	r2, r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <xTaskPriorityDisinherit+0xb4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d903      	bls.n	8003a20 <xTaskPriorityDisinherit+0x84>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <xTaskPriorityDisinherit+0xb4>)
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	0013      	movs	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4a09      	ldr	r2, [pc, #36]	@ (8003a54 <xTaskPriorityDisinherit+0xb8>)
 8003a2e:	189a      	adds	r2, r3, r2
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3304      	adds	r3, #4
 8003a34:	0019      	movs	r1, r3
 8003a36:	0010      	movs	r0, r2
 8003a38:	f7fe fcb3 	bl	80023a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a40:	68fb      	ldr	r3, [r7, #12]
	}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	20000738 	.word	0x20000738
 8003a50:	20000c14 	.word	0x20000c14
 8003a54:	2000073c 	.word	0x2000073c

08003a58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a62:	4b21      	ldr	r3, [pc, #132]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a68:	4b20      	ldr	r3, [pc, #128]	@ (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7fe fcef 	bl	8002452 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3301      	adds	r3, #1
 8003a78:	d10b      	bne.n	8003a92 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a88:	0011      	movs	r1, r2
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7fe fc89 	bl	80023a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a90:	e026      	b.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	18d3      	adds	r3, r2, r3
 8003a98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d209      	bcs.n	8003abe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aaa:	4b12      	ldr	r3, [pc, #72]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	0010      	movs	r0, r2
 8003ab8:	f7fe fc95 	bl	80023e6 <vListInsert>
}
 8003abc:	e010      	b.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	0019      	movs	r1, r3
 8003aca:	0010      	movs	r0, r2
 8003acc:	f7fe fc8b 	bl	80023e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d202      	bcs.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000c10 	.word	0x20000c10
 8003aec:	20000738 	.word	0x20000738
 8003af0:	20000bf8 	.word	0x20000bf8
 8003af4:	20000bc8 	.word	0x20000bc8
 8003af8:	20000bc4 	.word	0x20000bc4
 8003afc:	20000c2c 	.word	0x20000c2c

08003b00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b089      	sub	sp, #36	@ 0x24
 8003b04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b0a:	f000 fad5 	bl	80040b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <xTimerCreateTimerTask+0x70>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b1e:	003a      	movs	r2, r7
 8003b20:	1d39      	adds	r1, r7, #4
 8003b22:	2308      	movs	r3, #8
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fe fbfa 	bl	8002320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b2c:	683c      	ldr	r4, [r7, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4910      	ldr	r1, [pc, #64]	@ (8003b74 <xTimerCreateTimerTask+0x74>)
 8003b34:	4810      	ldr	r0, [pc, #64]	@ (8003b78 <xTimerCreateTimerTask+0x78>)
 8003b36:	9202      	str	r2, [sp, #8]
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	0022      	movs	r2, r4
 8003b42:	f7ff f986 	bl	8002e52 <xTaskCreateStatic>
 8003b46:	0002      	movs	r2, r0
 8003b48:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <xTimerCreateTimerTask+0x7c>)
 8003b4a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <xTimerCreateTimerTask+0x7c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003b54:	2301      	movs	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <xTimerCreateTimerTask+0x64>
 8003b5e:	b672      	cpsid	i
 8003b60:	46c0      	nop			@ (mov r8, r8)
 8003b62:	e7fd      	b.n	8003b60 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b005      	add	sp, #20
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000c68 	.word	0x20000c68
 8003b74:	080047a0 	.word	0x080047a0
 8003b78:	08003ca5 	.word	0x08003ca5
 8003b7c:	20000c6c 	.word	0x20000c6c

08003b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b08b      	sub	sp, #44	@ 0x2c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <xTimerGenericCommand+0x1e>
 8003b98:	b672      	cpsid	i
 8003b9a:	46c0      	nop			@ (mov r8, r8)
 8003b9c:	e7fd      	b.n	8003b9a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <xTimerGenericCommand+0x94>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d030      	beq.n	8003c08 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ba6:	2414      	movs	r4, #20
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	dc19      	bgt.n	8003bf4 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bc0:	f7ff fed0 	bl	8003964 <xTaskGetSchedulerState>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d109      	bne.n	8003bde <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bca:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <xTimerGenericCommand+0x94>)
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bd0:	1939      	adds	r1, r7, r4
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f7fe fd6b 	bl	80026ae <xQueueGenericSend>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bdc:	e014      	b.n	8003c08 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bde:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <xTimerGenericCommand+0x94>)
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	2314      	movs	r3, #20
 8003be4:	18f9      	adds	r1, r7, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	2200      	movs	r2, #0
 8003bea:	f7fe fd60 	bl	80026ae <xQueueGenericSend>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf2:	e009      	b.n	8003c08 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <xTimerGenericCommand+0x94>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	2314      	movs	r3, #20
 8003bfc:	18f9      	adds	r1, r7, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f7fe fe1d 	bl	800283e <xQueueGenericSendFromISR>
 8003c04:	0003      	movs	r3, r0
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b00b      	add	sp, #44	@ 0x2c
 8003c10:	bd90      	pop	{r4, r7, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	20000c68 	.word	0x20000c68

08003c18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c22:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca0 <prvProcessExpiredTimer+0x88>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fe fc0e 	bl	8002452 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2228      	movs	r2, #40	@ 0x28
 8003c3a:	5c9b      	ldrb	r3, [r3, r2]
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	2304      	movs	r3, #4
 8003c40:	4013      	ands	r3, r2
 8003c42:	d01a      	beq.n	8003c7a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	18d1      	adds	r1, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f8c7 	bl	8003de4 <prvInsertTimerInActiveList>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d018      	beq.n	8003c8c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	f7ff ff8b 	bl	8003b80 <xTimerGenericCommand>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <prvProcessExpiredTimer+0x74>
 8003c74:	b672      	cpsid	i
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	e7fd      	b.n	8003c76 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2228      	movs	r2, #40	@ 0x28
 8003c7e:	5c9b      	ldrb	r3, [r3, r2]
 8003c80:	2201      	movs	r2, #1
 8003c82:	4393      	bics	r3, r2
 8003c84:	b2d9      	uxtb	r1, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2228      	movs	r2, #40	@ 0x28
 8003c8a:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	0010      	movs	r0, r2
 8003c94:	4798      	blx	r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	20000c60 	.word	0x20000c60

08003ca4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cac:	2308      	movs	r3, #8
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 f855 	bl	8003d60 <prvGetNextExpireTime>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 f805 	bl	8003cd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cc6:	f000 f8cf 	bl	8003e68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	e7ee      	b.n	8003cac <prvTimerTask+0x8>
	...

08003cd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cda:	f7ff fabb 	bl	8003254 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cde:	2308      	movs	r3, #8
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 f85e 	bl	8003da4 <prvSampleTimeNow>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d12b      	bne.n	8003d4a <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10c      	bne.n	8003d12 <prvProcessTimerOrBlockTask+0x42>
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d808      	bhi.n	8003d12 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8003d00:	f7ff fab4 	bl	800326c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	0011      	movs	r1, r2
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7ff ff84 	bl	8003c18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d10:	e01d      	b.n	8003d4e <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <prvProcessTimerOrBlockTask+0x88>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <prvProcessTimerOrBlockTask+0x56>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <prvProcessTimerOrBlockTask+0x58>
 8003d26:	2300      	movs	r3, #0
 8003d28:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <prvProcessTimerOrBlockTask+0x8c>)
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	0019      	movs	r1, r3
 8003d38:	f7ff f858 	bl	8002dec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d3c:	f7ff fa96 	bl	800326c <xTaskResumeAll>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d104      	bne.n	8003d4e <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8003d44:	f000 fa84 	bl	8004250 <vPortYield>
}
 8003d48:	e001      	b.n	8003d4e <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8003d4a:	f7ff fa8f 	bl	800326c <xTaskResumeAll>
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	20000c64 	.word	0x20000c64
 8003d5c:	20000c68 	.word	0x20000c68

08003d60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <prvGetNextExpireTime+0x40>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <prvGetNextExpireTime+0x16>
 8003d72:	2201      	movs	r2, #1
 8003d74:	e000      	b.n	8003d78 <prvGetNextExpireTime+0x18>
 8003d76:	2200      	movs	r2, #0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d84:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <prvGetNextExpireTime+0x40>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e001      	b.n	8003d94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	20000c60 	.word	0x20000c60

08003da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dac:	f7ff faea 	bl	8003384 <xTaskGetTickCount>
 8003db0:	0003      	movs	r3, r0
 8003db2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003db4:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <prvSampleTimeNow+0x3c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d205      	bcs.n	8003dca <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8003dbe:	f000 f91d 	bl	8003ffc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e002      	b.n	8003dd0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <prvSampleTimeNow+0x3c>)
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b004      	add	sp, #16
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000c70 	.word	0x20000c70

08003de4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d812      	bhi.n	8003e30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e01b      	b.n	8003e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <prvInsertTimerInActiveList+0x7c>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	0019      	movs	r1, r3
 8003e28:	0010      	movs	r0, r2
 8003e2a:	f7fe fadc 	bl	80023e6 <vListInsert>
 8003e2e:	e012      	b.n	8003e56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d206      	bcs.n	8003e46 <prvInsertTimerInActiveList+0x62>
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e007      	b.n	8003e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e46:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <prvInsertTimerInActiveList+0x80>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	0019      	movs	r1, r3
 8003e50:	0010      	movs	r0, r2
 8003e52:	f7fe fac8 	bl	80023e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e56:	697b      	ldr	r3, [r7, #20]
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b006      	add	sp, #24
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000c64 	.word	0x20000c64
 8003e64:	20000c60 	.word	0x20000c60

08003e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b08d      	sub	sp, #52	@ 0x34
 8003e6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e6e:	e0b1      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e70:	2208      	movs	r2, #8
 8003e72:	18bb      	adds	r3, r7, r2
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	da10      	bge.n	8003e9c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e7a:	18bb      	adds	r3, r7, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <prvProcessReceivedCommands+0x24>
 8003e86:	b672      	cpsid	i
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	e7fd      	b.n	8003e88 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	6858      	ldr	r0, [r3, #4]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	0019      	movs	r1, r3
 8003e9a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	18bb      	adds	r3, r7, r2
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	da00      	bge.n	8003ea8 <prvProcessReceivedCommands+0x40>
 8003ea6:	e095      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ea8:	18bb      	adds	r3, r7, r2
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fe fac9 	bl	8002452 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff ff6e 	bl	8003da4 <prvSampleTimeNow>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8003ecc:	2308      	movs	r3, #8
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b09      	cmp	r3, #9
 8003ed4:	d900      	bls.n	8003ed8 <prvProcessReceivedCommands+0x70>
 8003ed6:	e07a      	b.n	8003fce <prvProcessReceivedCommands+0x166>
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	4b46      	ldr	r3, [pc, #280]	@ (8003ff4 <prvProcessReceivedCommands+0x18c>)
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	2228      	movs	r2, #40	@ 0x28
 8003ee6:	5c9b      	ldrb	r3, [r3, r2]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b2d9      	uxtb	r1, r3
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	2228      	movs	r2, #40	@ 0x28
 8003ef2:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ef4:	2408      	movs	r4, #8
 8003ef6:	193b      	adds	r3, r7, r4
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	18d1      	adds	r1, r2, r3
 8003f00:	193b      	adds	r3, r7, r4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	6a38      	ldr	r0, [r7, #32]
 8003f08:	f7ff ff6c 	bl	8003de4 <prvInsertTimerInActiveList>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d060      	beq.n	8003fd2 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	0010      	movs	r0, r2
 8003f18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	2228      	movs	r2, #40	@ 0x28
 8003f1e:	5c9b      	ldrb	r3, [r3, r2]
 8003f20:	001a      	movs	r2, r3
 8003f22:	2304      	movs	r3, #4
 8003f24:	4013      	ands	r3, r2
 8003f26:	d054      	beq.n	8003fd2 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	18d2      	adds	r2, r2, r3
 8003f32:	6a38      	ldr	r0, [r7, #32]
 8003f34:	2300      	movs	r3, #0
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f7ff fe20 	bl	8003b80 <xTimerGenericCommand>
 8003f40:	0003      	movs	r3, r0
 8003f42:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d143      	bne.n	8003fd2 <prvProcessReceivedCommands+0x16a>
 8003f4a:	b672      	cpsid	i
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	e7fd      	b.n	8003f4c <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	2228      	movs	r2, #40	@ 0x28
 8003f54:	5c9b      	ldrb	r3, [r3, r2]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4393      	bics	r3, r2
 8003f5a:	b2d9      	uxtb	r1, r3
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2228      	movs	r2, #40	@ 0x28
 8003f60:	5499      	strb	r1, [r3, r2]
					break;
 8003f62:	e037      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2228      	movs	r2, #40	@ 0x28
 8003f68:	5c9b      	ldrb	r3, [r3, r2]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b2d9      	uxtb	r1, r3
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	2228      	movs	r2, #40	@ 0x28
 8003f74:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f76:	2308      	movs	r3, #8
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <prvProcessReceivedCommands+0x126>
 8003f88:	b672      	cpsid	i
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	e7fd      	b.n	8003f8a <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	18d1      	adds	r1, r2, r3
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	6a38      	ldr	r0, [r7, #32]
 8003f9c:	f7ff ff22 	bl	8003de4 <prvInsertTimerInActiveList>
					break;
 8003fa0:	e018      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	2228      	movs	r2, #40	@ 0x28
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	001a      	movs	r2, r3
 8003faa:	2302      	movs	r3, #2
 8003fac:	4013      	ands	r3, r2
 8003fae:	d104      	bne.n	8003fba <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 fa9c 	bl	80044f0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fb8:	e00c      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	2228      	movs	r2, #40	@ 0x28
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	b2d9      	uxtb	r1, r3
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	2228      	movs	r2, #40	@ 0x28
 8003fca:	5499      	strb	r1, [r3, r2]
					break;
 8003fcc:	e002      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	e000      	b.n	8003fd4 <prvProcessReceivedCommands+0x16c>
					break;
 8003fd2:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd4:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <prvProcessReceivedCommands+0x190>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	18b9      	adds	r1, r7, r2
 8003fdc:	2200      	movs	r2, #0
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7fe fca1 	bl	8002926 <xQueueReceive>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	d000      	beq.n	8003fea <prvProcessReceivedCommands+0x182>
 8003fe8:	e742      	b.n	8003e70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b00b      	add	sp, #44	@ 0x2c
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	0800482c 	.word	0x0800482c
 8003ff8:	20000c68 	.word	0x20000c68

08003ffc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004002:	e042      	b.n	800408a <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004004:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <prvSwitchTimerLists+0xb4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <prvSwitchTimerLists+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3304      	adds	r3, #4
 800401c:	0018      	movs	r0, r3
 800401e:	f7fe fa18 	bl	8002452 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	0010      	movs	r0, r2
 800402a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2228      	movs	r2, #40	@ 0x28
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	001a      	movs	r2, r3
 8004034:	2304      	movs	r3, #4
 8004036:	4013      	ands	r3, r2
 8004038:	d027      	beq.n	800408a <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	18d3      	adds	r3, r2, r3
 8004042:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d90e      	bls.n	800406a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <prvSwitchTimerLists+0xb4>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3304      	adds	r3, #4
 8004060:	0019      	movs	r1, r3
 8004062:	0010      	movs	r0, r2
 8004064:	f7fe f9bf 	bl	80023e6 <vListInsert>
 8004068:	e00f      	b.n	800408a <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	2300      	movs	r3, #0
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	2100      	movs	r1, #0
 8004076:	f7ff fd83 	bl	8003b80 <xTimerGenericCommand>
 800407a:	0003      	movs	r3, r0
 800407c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <prvSwitchTimerLists+0x8e>
 8004084:	b672      	cpsid	i
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	e7fd      	b.n	8004086 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800408a:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <prvSwitchTimerLists+0xb4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1b7      	bne.n	8004004 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004094:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <prvSwitchTimerLists+0xb4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <prvSwitchTimerLists+0xb8>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <prvSwitchTimerLists+0xb4>)
 80040a0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80040a2:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <prvSwitchTimerLists+0xb8>)
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b006      	add	sp, #24
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000c60 	.word	0x20000c60
 80040b4:	20000c64 	.word	0x20000c64

080040b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040be:	f000 f8d7 	bl	8004270 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040c2:	4b16      	ldr	r3, [pc, #88]	@ (800411c <prvCheckForValidListAndQueue+0x64>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d123      	bne.n	8004112 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <prvCheckForValidListAndQueue+0x68>)
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fe f93f 	bl	8002350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040d2:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <prvCheckForValidListAndQueue+0x6c>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fe f93b 	bl	8002350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <prvCheckForValidListAndQueue+0x70>)
 80040dc:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <prvCheckForValidListAndQueue+0x68>)
 80040de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <prvCheckForValidListAndQueue+0x74>)
 80040e2:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <prvCheckForValidListAndQueue+0x6c>)
 80040e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040e6:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <prvCheckForValidListAndQueue+0x78>)
 80040e8:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <prvCheckForValidListAndQueue+0x7c>)
 80040ea:	2100      	movs	r1, #0
 80040ec:	9100      	str	r1, [sp, #0]
 80040ee:	2110      	movs	r1, #16
 80040f0:	200a      	movs	r0, #10
 80040f2:	f7fe fa2b 	bl	800254c <xQueueGenericCreateStatic>
 80040f6:	0002      	movs	r2, r0
 80040f8:	4b08      	ldr	r3, [pc, #32]	@ (800411c <prvCheckForValidListAndQueue+0x64>)
 80040fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040fc:	4b07      	ldr	r3, [pc, #28]	@ (800411c <prvCheckForValidListAndQueue+0x64>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004104:	4b05      	ldr	r3, [pc, #20]	@ (800411c <prvCheckForValidListAndQueue+0x64>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0b      	ldr	r2, [pc, #44]	@ (8004138 <prvCheckForValidListAndQueue+0x80>)
 800410a:	0011      	movs	r1, r2
 800410c:	0018      	movs	r0, r3
 800410e:	f7fe fe45 	bl	8002d9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004112:	f000 f8bf 	bl	8004294 <vPortExitCritical>
}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000c68 	.word	0x20000c68
 8004120:	20000c38 	.word	0x20000c38
 8004124:	20000c4c 	.word	0x20000c4c
 8004128:	20000c60 	.word	0x20000c60
 800412c:	20000c64 	.word	0x20000c64
 8004130:	20000d14 	.word	0x20000d14
 8004134:	20000c74 	.word	0x20000c74
 8004138:	080047a8 	.word	0x080047a8

0800413c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3b04      	subs	r3, #4
 800414c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2280      	movs	r2, #128	@ 0x80
 8004152:	0452      	lsls	r2, r2, #17
 8004154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b04      	subs	r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3b04      	subs	r3, #4
 8004166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004168:	4a08      	ldr	r2, [pc, #32]	@ (800418c <pxPortInitialiseStack+0x50>)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3b14      	subs	r3, #20
 8004172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3b20      	subs	r3, #32
 800417e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004180:	68fb      	ldr	r3, [r7, #12]
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	08004191 	.word	0x08004191

08004190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800419a:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <prvTaskExitError+0x2c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	d002      	beq.n	80041a8 <prvTaskExitError+0x18>
 80041a2:	b672      	cpsid	i
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	e7fd      	b.n	80041a4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80041a8:	b672      	cpsid	i
	while( ulDummy == 0 )
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0fc      	beq.n	80041ac <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	46c0      	nop			@ (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	2000000c 	.word	0x2000000c

080041c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80041c4:	46c0      	nop			@ (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	0000      	movs	r0, r0
 80041cc:	0000      	movs	r0, r0
	...

080041d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80041d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004200 <pxCurrentTCBConst2>)
 80041d2:	6813      	ldr	r3, [r2, #0]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	3020      	adds	r0, #32
 80041d8:	f380 8809 	msr	PSP, r0
 80041dc:	2002      	movs	r0, #2
 80041de:	f380 8814 	msr	CONTROL, r0
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80041e8:	46ae      	mov	lr, r5
 80041ea:	bc08      	pop	{r3}
 80041ec:	bc04      	pop	{r2}
 80041ee:	b662      	cpsie	i
 80041f0:	4718      	bx	r3
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46c0      	nop			@ (mov r8, r8)
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	46c0      	nop			@ (mov r8, r8)
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46c0      	nop			@ (mov r8, r8)

08004200 <pxCurrentTCBConst2>:
 8004200:	20000738 	.word	0x20000738
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46c0      	nop			@ (mov r8, r8)

08004208 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800420c:	4b0e      	ldr	r3, [pc, #56]	@ (8004248 <xPortStartScheduler+0x40>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <xPortStartScheduler+0x40>)
 8004212:	21ff      	movs	r1, #255	@ 0xff
 8004214:	0409      	lsls	r1, r1, #16
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <xPortStartScheduler+0x40>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <xPortStartScheduler+0x40>)
 8004220:	21ff      	movs	r1, #255	@ 0xff
 8004222:	0609      	lsls	r1, r1, #24
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004228:	f000 f898 	bl	800435c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800422c:	4b07      	ldr	r3, [pc, #28]	@ (800424c <xPortStartScheduler+0x44>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004232:	f7ff ffcd 	bl	80041d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004236:	f7ff f963 	bl	8003500 <vTaskSwitchContext>
	prvTaskExitError();
 800423a:	f7ff ffa9 	bl	8004190 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800423e:	2300      	movs	r3, #0
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	e000ed20 	.word	0xe000ed20
 800424c:	2000000c 	.word	0x2000000c

08004250 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <vPortYield+0x1c>)
 8004256:	2280      	movs	r2, #128	@ 0x80
 8004258:	0552      	lsls	r2, r2, #21
 800425a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800425c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004260:	f3bf 8f6f 	isb	sy
}
 8004264:	46c0      	nop			@ (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004274:	b672      	cpsid	i
    uxCriticalNesting++;
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <vPortEnterCritical+0x20>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <vPortEnterCritical+0x20>)
 800427e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004280:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004284:	f3bf 8f6f 	isb	sy
}
 8004288:	46c0      	nop			@ (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	2000000c 	.word	0x2000000c

08004294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004298:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <vPortExitCritical+0x2c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <vPortExitCritical+0x12>
 80042a0:	b672      	cpsid	i
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	e7fd      	b.n	80042a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <vPortExitCritical+0x2c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <vPortExitCritical+0x2c>)
 80042ae:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80042b0:	4b03      	ldr	r3, [pc, #12]	@ (80042c0 <vPortExitCritical+0x2c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d100      	bne.n	80042ba <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80042b8:	b662      	cpsie	i
    }
}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	2000000c 	.word	0x2000000c

080042c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80042c4:	f3ef 8010 	mrs	r0, PRIMASK
 80042c8:	b672      	cpsid	i
 80042ca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	0018      	movs	r0, r3

080042d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80042d0:	f380 8810 	msr	PRIMASK, r0
 80042d4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80042d6:	46c0      	nop			@ (mov r8, r8)
	...

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <pxCurrentTCBConst>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	3820      	subs	r0, #32
 80042ea:	6010      	str	r0, [r2, #0]
 80042ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80042ee:	4644      	mov	r4, r8
 80042f0:	464d      	mov	r5, r9
 80042f2:	4656      	mov	r6, sl
 80042f4:	465f      	mov	r7, fp
 80042f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80042f8:	b508      	push	{r3, lr}
 80042fa:	b672      	cpsid	i
 80042fc:	f7ff f900 	bl	8003500 <vTaskSwitchContext>
 8004300:	b662      	cpsie	i
 8004302:	bc0c      	pop	{r2, r3}
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	6808      	ldr	r0, [r1, #0]
 8004308:	3010      	adds	r0, #16
 800430a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800430c:	46a0      	mov	r8, r4
 800430e:	46a9      	mov	r9, r5
 8004310:	46b2      	mov	sl, r6
 8004312:	46bb      	mov	fp, r7
 8004314:	f380 8809 	msr	PSP, r0
 8004318:	3820      	subs	r0, #32
 800431a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800431c:	4718      	bx	r3
 800431e:	46c0      	nop			@ (mov r8, r8)

08004320 <pxCurrentTCBConst>:
 8004320:	20000738 	.word	0x20000738
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004324:	46c0      	nop			@ (mov r8, r8)
 8004326:	46c0      	nop			@ (mov r8, r8)

08004328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800432e:	f7ff ffc9 	bl	80042c4 <ulSetInterruptMaskFromISR>
 8004332:	0003      	movs	r3, r0
 8004334:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004336:	f7ff f833 	bl	80033a0 <xTaskIncrementTick>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d003      	beq.n	8004346 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <xPortSysTickHandler+0x30>)
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	0552      	lsls	r2, r2, #21
 8004344:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff ffc1 	bl	80042d0 <vClearInterruptMaskFromISR>
}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b002      	add	sp, #8
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <prvSetupTimerInterrupt+0x34>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <prvSetupTimerInterrupt+0x38>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800436c:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <prvSetupTimerInterrupt+0x3c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	22fa      	movs	r2, #250	@ 0xfa
 8004372:	0091      	lsls	r1, r2, #2
 8004374:	0018      	movs	r0, r3
 8004376:	f7fb fec7 	bl	8000108 <__udivsi3>
 800437a:	0003      	movs	r3, r0
 800437c:	001a      	movs	r2, r3
 800437e:	4b07      	ldr	r3, [pc, #28]	@ (800439c <prvSetupTimerInterrupt+0x40>)
 8004380:	3a01      	subs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004384:	4b02      	ldr	r3, [pc, #8]	@ (8004390 <prvSetupTimerInterrupt+0x34>)
 8004386:	2207      	movs	r2, #7
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	e000e010 	.word	0xe000e010
 8004394:	e000e018 	.word	0xe000e018
 8004398:	20000000 	.word	0x20000000
 800439c:	e000e014 	.word	0xe000e014

080043a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80043ac:	f7fe ff52 	bl	8003254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043b0:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <pvPortMalloc+0x13c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043b8:	f000 f8e4 	bl	8004584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043bc:	4b48      	ldr	r3, [pc, #288]	@ (80044e0 <pvPortMalloc+0x140>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4013      	ands	r3, r2
 80043c4:	d000      	beq.n	80043c8 <pvPortMalloc+0x28>
 80043c6:	e07b      	b.n	80044c0 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d013      	beq.n	80043f6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 80043ce:	2208      	movs	r2, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2207      	movs	r2, #7
 80043da:	4013      	ands	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2207      	movs	r2, #7
 80043e2:	4393      	bics	r3, r2
 80043e4:	3308      	adds	r3, #8
 80043e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2207      	movs	r2, #7
 80043ec:	4013      	ands	r3, r2
 80043ee:	d002      	beq.n	80043f6 <pvPortMalloc+0x56>
 80043f0:	b672      	cpsid	i
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	e7fd      	b.n	80043f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d061      	beq.n	80044c0 <pvPortMalloc+0x120>
 80043fc:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <pvPortMalloc+0x144>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d85c      	bhi.n	80044c0 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004406:	4b38      	ldr	r3, [pc, #224]	@ (80044e8 <pvPortMalloc+0x148>)
 8004408:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800440a:	4b37      	ldr	r3, [pc, #220]	@ (80044e8 <pvPortMalloc+0x148>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004410:	e004      	b.n	800441c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	d903      	bls.n	800442e <pvPortMalloc+0x8e>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f1      	bne.n	8004412 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800442e:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <pvPortMalloc+0x13c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	d043      	beq.n	80044c0 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2208      	movs	r2, #8
 800443e:	189b      	adds	r3, r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1ad2      	subs	r2, r2, r3
 8004452:	2308      	movs	r3, #8
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	429a      	cmp	r2, r3
 8004458:	d917      	bls.n	800448a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	18d3      	adds	r3, r2, r3
 8004460:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2207      	movs	r2, #7
 8004466:	4013      	ands	r3, r2
 8004468:	d002      	beq.n	8004470 <pvPortMalloc+0xd0>
 800446a:	b672      	cpsid	i
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	e7fd      	b.n	800446c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	0018      	movs	r0, r3
 8004486:	f000 f8dd 	bl	8004644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448a:	4b16      	ldr	r3, [pc, #88]	@ (80044e4 <pvPortMalloc+0x144>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	4b13      	ldr	r3, [pc, #76]	@ (80044e4 <pvPortMalloc+0x144>)
 8004496:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004498:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <pvPortMalloc+0x144>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <pvPortMalloc+0x14c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d203      	bcs.n	80044ac <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	@ (80044e4 <pvPortMalloc+0x144>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <pvPortMalloc+0x14c>)
 80044aa:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <pvPortMalloc+0x140>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044c0:	f7fe fed4 	bl	800326c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2207      	movs	r2, #7
 80044c8:	4013      	ands	r3, r2
 80044ca:	d002      	beq.n	80044d2 <pvPortMalloc+0x132>
 80044cc:	b672      	cpsid	i
 80044ce:	46c0      	nop			@ (mov r8, r8)
 80044d0:	e7fd      	b.n	80044ce <pvPortMalloc+0x12e>
	return pvReturn;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b006      	add	sp, #24
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	2000196c 	.word	0x2000196c
 80044e0:	20001978 	.word	0x20001978
 80044e4:	20001970 	.word	0x20001970
 80044e8:	20001964 	.word	0x20001964
 80044ec:	20001974 	.word	0x20001974

080044f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d037      	beq.n	8004572 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004502:	2308      	movs	r3, #8
 8004504:	425b      	negs	r3, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	18d3      	adds	r3, r2, r3
 800450a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <vPortFree+0x8c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4013      	ands	r3, r2
 800451a:	d102      	bne.n	8004522 <vPortFree+0x32>
 800451c:	b672      	cpsid	i
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	e7fd      	b.n	800451e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <vPortFree+0x40>
 800452a:	b672      	cpsid	i
 800452c:	46c0      	nop			@ (mov r8, r8)
 800452e:	e7fd      	b.n	800452c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b11      	ldr	r3, [pc, #68]	@ (800457c <vPortFree+0x8c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4013      	ands	r3, r2
 800453a:	d01a      	beq.n	8004572 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d116      	bne.n	8004572 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <vPortFree+0x8c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	43db      	mvns	r3, r3
 800454e:	401a      	ands	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004554:	f7fe fe7e 	bl	8003254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <vPortFree+0x90>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	18d2      	adds	r2, r2, r3
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <vPortFree+0x90>)
 8004564:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 f86b 	bl	8004644 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800456e:	f7fe fe7d 	bl	800326c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b004      	add	sp, #16
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	20001978 	.word	0x20001978
 8004580:	20001970 	.word	0x20001970

08004584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800458a:	23c0      	movs	r3, #192	@ 0xc0
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004590:	4b26      	ldr	r3, [pc, #152]	@ (800462c <prvHeapInit+0xa8>)
 8004592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2207      	movs	r2, #7
 8004598:	4013      	ands	r3, r2
 800459a:	d00c      	beq.n	80045b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3307      	adds	r3, #7
 80045a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2207      	movs	r2, #7
 80045a6:	4393      	bics	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <prvHeapInit+0xa8>)
 80045b2:	18d3      	adds	r3, r2, r3
 80045b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <prvHeapInit+0xac>)
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <prvHeapInit+0xac>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	18d3      	adds	r3, r2, r3
 80045cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045ce:	2208      	movs	r2, #8
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2207      	movs	r2, #7
 80045da:	4393      	bics	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <prvHeapInit+0xb0>)
 80045e2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80045e4:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <prvHeapInit+0xb0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2200      	movs	r2, #0
 80045ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045ec:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <prvHeapInit+0xb0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	1ad2      	subs	r2, r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004602:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <prvHeapInit+0xb0>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <prvHeapInit+0xb4>)
 8004610:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	4b09      	ldr	r3, [pc, #36]	@ (800463c <prvHeapInit+0xb8>)
 8004618:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800461a:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <prvHeapInit+0xbc>)
 800461c:	2280      	movs	r2, #128	@ 0x80
 800461e:	0612      	lsls	r2, r2, #24
 8004620:	601a      	str	r2, [r3, #0]
}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	20000d64 	.word	0x20000d64
 8004630:	20001964 	.word	0x20001964
 8004634:	2000196c 	.word	0x2000196c
 8004638:	20001974 	.word	0x20001974
 800463c:	20001970 	.word	0x20001970
 8004640:	20001978 	.word	0x20001978

08004644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800464c:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <prvInsertBlockIntoFreeList+0xa8>)
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e002      	b.n	8004658 <prvInsertBlockIntoFreeList+0x14>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d8f7      	bhi.n	8004652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d108      	bne.n	8004686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	18d2      	adds	r2, r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	18d2      	adds	r2, r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d118      	bne.n	80046cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <prvInsertBlockIntoFreeList+0xac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d00d      	beq.n	80046c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	18d2      	adds	r2, r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e008      	b.n	80046d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <prvInsertBlockIntoFreeList+0xac>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e003      	b.n	80046d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d002      	beq.n	80046e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	20001964 	.word	0x20001964
 80046f0:	2000196c 	.word	0x2000196c

080046f4 <memset>:
 80046f4:	0003      	movs	r3, r0
 80046f6:	1882      	adds	r2, r0, r2
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d100      	bne.n	80046fe <memset+0xa>
 80046fc:	4770      	bx	lr
 80046fe:	7019      	strb	r1, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	e7f9      	b.n	80046f8 <memset+0x4>

08004704 <__libc_init_array>:
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	2600      	movs	r6, #0
 8004708:	4c0c      	ldr	r4, [pc, #48]	@ (800473c <__libc_init_array+0x38>)
 800470a:	4d0d      	ldr	r5, [pc, #52]	@ (8004740 <__libc_init_array+0x3c>)
 800470c:	1b64      	subs	r4, r4, r5
 800470e:	10a4      	asrs	r4, r4, #2
 8004710:	42a6      	cmp	r6, r4
 8004712:	d109      	bne.n	8004728 <__libc_init_array+0x24>
 8004714:	2600      	movs	r6, #0
 8004716:	f000 f823 	bl	8004760 <_init>
 800471a:	4c0a      	ldr	r4, [pc, #40]	@ (8004744 <__libc_init_array+0x40>)
 800471c:	4d0a      	ldr	r5, [pc, #40]	@ (8004748 <__libc_init_array+0x44>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	42a6      	cmp	r6, r4
 8004724:	d105      	bne.n	8004732 <__libc_init_array+0x2e>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	00b3      	lsls	r3, r6, #2
 800472a:	58eb      	ldr	r3, [r5, r3]
 800472c:	4798      	blx	r3
 800472e:	3601      	adds	r6, #1
 8004730:	e7ee      	b.n	8004710 <__libc_init_array+0xc>
 8004732:	00b3      	lsls	r3, r6, #2
 8004734:	58eb      	ldr	r3, [r5, r3]
 8004736:	4798      	blx	r3
 8004738:	3601      	adds	r6, #1
 800473a:	e7f2      	b.n	8004722 <__libc_init_array+0x1e>
 800473c:	0800485c 	.word	0x0800485c
 8004740:	0800485c 	.word	0x0800485c
 8004744:	08004860 	.word	0x08004860
 8004748:	0800485c 	.word	0x0800485c

0800474c <memcpy>:
 800474c:	2300      	movs	r3, #0
 800474e:	b510      	push	{r4, lr}
 8004750:	429a      	cmp	r2, r3
 8004752:	d100      	bne.n	8004756 <memcpy+0xa>
 8004754:	bd10      	pop	{r4, pc}
 8004756:	5ccc      	ldrb	r4, [r1, r3]
 8004758:	54c4      	strb	r4, [r0, r3]
 800475a:	3301      	adds	r3, #1
 800475c:	e7f8      	b.n	8004750 <memcpy+0x4>
	...

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
